/**
 * @license
 Respond.js v1.4.2: min/max-width media query polyfill * Copyright 2013 Scott Jehl
 Licensed under https://github.com/scottjehl/Respond/blob/master/LICENSE-MIT
*/
'use strict';
!function (window) {
    /** @type {function(this:Window, string): (MediaQueryList|null)} */
    window.matchMedia = window.matchMedia || function (doc) {
        var match;
        /** @type {!Element} */
        var c = doc.documentElement;
        /** @type {(Node|null)} */
        var s = c.firstElementChild || c.firstChild;
        /** @type {!Element} */
        var d = doc.createElement("body");
        /** @type {!Element} */
        var div = doc.createElement("div");
        return div.id = "mq-test-1", div.style.cssText = "position:absolute;top:-100em", d.style.background = "none", d.appendChild(div), function (chunk_part) {
            return div.innerHTML = '&shy;<style media="' + chunk_part + '"> #mq-test-1 { width: 42px; }</style>', c.insertBefore(d, s), match = 42 === div.offsetWidth, c.removeChild(d), {
                matches: match,
                media: chunk_part
            };
        };
    }(window.document);
}(this), function (w) {
    /**
     * @return {undefined}
     */
    function callMedia() {
        applyMedia(true);
    }
    var respond = {};
    w.respond = respond;
    /**
     * @return {undefined}
     */
    respond.update = function () {
    };
    /** @type {!Array} */
    var requestQueue = [];
    var AJAX = function () {
        /** @type {boolean} */
        var b = false;
        try {
            /** @type {!XMLHttpRequest} */
            b = new w.XMLHttpRequest;
        } catch (c) {
            b = new w.ActiveXObject("Microsoft.XMLHTTP");
        }
        return function () {
            return b;
        };
    }();
    /**
     * @param {?} uri
     * @param {!Function} success
     * @return {undefined}
     */
    var ajax = function (uri, success) {
        var xhr = AJAX();
        if (xhr) {
            xhr.open("GET", uri, true);
            /**
             * @return {undefined}
             */
            xhr.onreadystatechange = function () {
                if (!(4 !== xhr.readyState || 200 !== xhr.status && 304 !== xhr.status)) {
                    success(xhr.responseText);
                }
            };
            if (4 !== xhr.readyState) {
                xhr.send(null);
            }
        }
    };
    if (respond.ajax = ajax, respond.queue = requestQueue, respond.regex = {
        media: /@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,
        keyframes: /@(?:\-(?:o|moz|webkit)\-)?keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]*\}/gi,
        urls: /(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,
        findStyles: /@media *([^\{]+)\{([\S\s]+?)$/,
        only: /(only\s+)?([a-zA-Z]+)\s?/,
        minw: /\([\s]*min\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/,
        maxw: /\([\s]*max\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/
    }, respond.mediaQueriesSupported = w.matchMedia && null !== w.matchMedia("only all") && w.matchMedia("only all").matches, !respond.mediaQueriesSupported) {
        var lastCall;
        var resizeDefer;
        var r;
        /** @type {!HTMLDocument} */
        var doc = w.document;
        /** @type {!Element} */
        var docElem = doc.documentElement;
        /** @type {!Array} */
        var mediastyles = [];
        /** @type {!Array} */
        var rules = [];
        /** @type {!Array} */
        var headers = [];
        var parsedSheets = {};
        /** @type {number} */
        var resizeThrottle = 30;
        /** @type {!Element} */
        var head = doc.getElementsByTagName("head")[0] || docElem;
        /** @type {!Element} */
        var d = doc.getElementsByTagName("base")[0];
        /** @type {!NodeList<Element>} */
        var sheets = head.getElementsByTagName("link");
        /**
         * @return {?}
         */
        var getEmValue = function () {
            var a;
            /** @type {!Element} */
            var o = doc.createElement("div");
            /** @type {!HTMLBodyElement} */
            var c = doc.body;
            /** @type {(number|string)} */
            var originalHTMLFontSize = docElem.style.fontSize;
            /** @type {(number|string)} */
            var e = c && c.style.fontSize;
            /** @type {boolean} */
            var f = false;
            return o.style.cssText = "position:absolute;font-size:1em;width:1em", c || (c = f = doc.createElement("body"), c.style.background = "none"), docElem.style.fontSize = "100%", c.style.fontSize = "100%", c.appendChild(o), f && docElem.insertBefore(c, docElem.firstChild), a = o.offsetWidth, f ? docElem.removeChild(c) : c.removeChild(o), docElem.style.fontSize = originalHTMLFontSize, e && (c.style.fontSize = e), a = r = parseFloat(a);
        };
        /**
         * @param {string} fromResize
         * @return {?}
         */
        var applyMedia = function (fromResize) {
            /** @type {string} */
            var name = "clientWidth";
            var docElemProp = docElem[name];
            var currWidth = "CSS1Compat" === doc.compatMode && docElemProp || doc.body[name] || docElemProp;
            var connections = {};
            /** @type {!Element} */
            var lastStyleElementInsertedAtTop = sheets[sheets.length - 1];
            /** @type {number} */
            var curr = (new Date).getTime();
            if (fromResize && lastCall && resizeThrottle > curr - lastCall) {
                return w.clearTimeout(resizeDefer), resizeDefer = w.setTimeout(applyMedia, resizeThrottle), void 0;
            }
            /** @type {number} */
            lastCall = curr;
            var i;
            for (i in mediastyles) {
                if (mediastyles.hasOwnProperty(i)) {
                    var thisstyle = mediastyles[i];
                    var min = thisstyle.minw;
                    var max = thisstyle.maxw;
                    /** @type {boolean} */
                    var minnull = null === min;
                    /** @type {boolean} */
                    var isMaxValidation = null === max;
                    /** @type {string} */
                    var em = "em";
                    if (min) {
                        /** @type {number} */
                        min = parseFloat(min) * (min.indexOf(em) > -1 ? r || getEmValue() : 1);
                    }
                    if (max) {
                        /** @type {number} */
                        max = parseFloat(max) * (max.indexOf(em) > -1 ? r || getEmValue() : 1);
                    }
                    if (!(thisstyle.hasquery && (minnull && isMaxValidation || !(minnull || currWidth >= min) || !(isMaxValidation || max >= currWidth)))) {
                        if (!connections[thisstyle.media]) {
                            /** @type {!Array} */
                            connections[thisstyle.media] = [];
                        }
                        connections[thisstyle.media].push(rules[thisstyle.rules]);
                    }
                }
            }
            var key;
            for (key in headers) {
                if (headers.hasOwnProperty(key) && headers[key] && headers[key].parentNode === head) {
                    head.removeChild(headers[key]);
                }
            }
            /** @type {number} */
            headers.length = 0;
            var c;
            for (c in connections) {
                if (connections.hasOwnProperty(c)) {
                    /** @type {!Element} */
                    var el = doc.createElement("style");
                    var css = connections[c].join("\n");
                    /** @type {string} */
                    el.type = "text/css";
                    /** @type {string} */
                    el.media = c;
                    head.insertBefore(el, lastStyleElementInsertedAtTop.nextSibling);
                    if (el.styleSheet) {
                        el.styleSheet.cssText = css;
                    } else {
                        el.appendChild(doc.createTextNode(css));
                    }
                    headers.push(el);
                }
            }
        };
        /**
         * @param {string} styles
         * @param {string} href
         * @param {string} name
         * @return {undefined}
         */
        var translate = function (styles, href, name) {
            var serviceUuids = styles.replace(respond.regex.keyframes, "").match(respond.regex.media);
            var indexOfRequirement = serviceUuids && serviceUuids.length || 0;
            href = href.substring(0, href.lastIndexOf("/"));
            /**
             * @param {string} css
             * @return {?}
             */
            var repUrls = function (css) {
                return css.replace(respond.regex.urls, "$1" + href + "$2$3");
            };
            var can = !indexOfRequirement && name;
            if (href.length) {
                /** @type {string} */
                href = href + "/";
            }
            if (can) {
                /** @type {number} */
                indexOfRequirement = 1;
            }
            /** @type {number} */
            var i = 0;
            for (; indexOfRequirement > i; i++) {
                var matchedSource;
                var thisq;
                var eachq;
                var eql;
                if (can) {
                    /** @type {string} */
                    matchedSource = name;
                    rules.push(repUrls(styles));
                } else {
                    matchedSource = serviceUuids[i].match(respond.regex.findStyles) && RegExp.$1;
                    rules.push(RegExp.$2 && repUrls(RegExp.$2));
                }
                eachq = matchedSource.split(",");
                eql = eachq.length;
                /** @type {number} */
                var j = 0;
                for (; eql > j; j++) {
                    thisq = eachq[j];
                    mediastyles.push({
                        media: thisq.split("(")[0].match(respond.regex.only) && RegExp.$2 || "all",
                        rules: rules.length - 1,
                        hasquery: thisq.indexOf("(") > -1,
                        minw: thisq.match(respond.regex.minw) && parseFloat(RegExp.$1) + (RegExp.$2 || ""),
                        maxw: thisq.match(respond.regex.maxw) && parseFloat(RegExp.$1) + (RegExp.$2 || "")
                    });
                }
            }
            applyMedia();
        };
        /**
         * @return {undefined}
         */
        var makeRequests = function () {
            if (requestQueue.length) {
                var thisRequest = requestQueue.shift();
                ajax(thisRequest.href, function (styles) {
                    translate(styles, thisRequest.href, thisRequest.media);
                    /** @type {boolean} */
                    parsedSheets[thisRequest.href] = true;
                    w.setTimeout(function () {
                        makeRequests();
                    }, 0);
                });
            }
        };
        /**
         * @return {undefined}
         */
        var ripCSS = function () {
            /** @type {number} */
            var i = 0;
            for (; i < sheets.length; i++) {
                /** @type {!Element} */
                var sheet = sheets[i];
                var href = sheet.href;
                var media = sheet.media;
                var isExternal = sheet.rel && "stylesheet" === sheet.rel.toLowerCase();
                if (href && isExternal && !parsedSheets[href]) {
                    if (sheet.styleSheet && sheet.styleSheet.rawCssText) {
                        translate(sheet.styleSheet.rawCssText, href, media);
                        /** @type {boolean} */
                        parsedSheets[href] = true;
                    } else {
                        if (!/^([a-zA-Z:]*\/\/)/.test(href) && !d || href.replace(RegExp.$1, "").split("/")[0] === w.location.host) {
                            if ("//" === href.substring(0, 2)) {
                                /** @type {string} */
                                href = w.location.protocol + href;
                            }
                            requestQueue.push({
                                href: href,
                                media: media
                            });
                        }
                    }
                }
            }
            makeRequests();
        };
        ripCSS();
        /** @type {function(): undefined} */
        respond.update = ripCSS;
        /** @type {function(): ?} */
        respond.getEmValue = getEmValue;
        if (w.addEventListener) {
            w.addEventListener("resize", callMedia, false);
        } else {
            if (w.attachEvent) {
                w.attachEvent("onresize", callMedia);
            }
        }
    }
}(this);
