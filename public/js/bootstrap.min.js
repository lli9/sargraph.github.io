/**
 * @license
 Bootstrap v4.4.1 (https://getbootstrap.com/)
 Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
*/
'use strict';
!function (w, factory) {
  if ("object" == typeof exports && "undefined" != typeof module) {
    factory(exports, require("jquery"), require("popper.js"));
  } else {
    if ("function" == typeof define && define.amd) {
      define(["exports", "jquery", "popper.js"], factory);
    } else {
      factory((w = w || self).bootstrap = {}, w.jQuery, w.Popper);
    }
  }
}(this, function (exports, $, obj) {
  /**
   * @param {!Function} d
   * @param {string} props
   * @return {undefined}
   */
  function t(d, props) {
    /** @type {number} */
    var i = 0;
    for (; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      /** @type {boolean} */
      descriptor.configurable = true;
      if ("value" in descriptor) {
        /** @type {boolean} */
        descriptor.writable = true;
      }
      Object.defineProperty(d, descriptor.key, descriptor);
    }
  }
  /**
   * @param {!Function} obj
   * @param {!Function} n
   * @param {!Function} a
   * @return {?}
   */
  function _createClass(obj, n, a) {
    return n && t(obj.prototype, n), a && t(obj, a), obj;
  }
  /**
   * @param {!Object} o
   * @param {boolean} op
   * @return {?}
   */
  function assign(o, op) {
    /** @type {!Array<string>} */
    var t = Object.keys(o);
    if (Object.getOwnPropertySymbols) {
      /** @type {!Array<?>} */
      var neighbors = Object.getOwnPropertySymbols(o);
      if (op) {
        /** @type {!Array<?>} */
        neighbors = neighbors.filter(function (key) {
          return Object.getOwnPropertyDescriptor(o, key).enumerable;
        });
      }
      t.push.apply(t, neighbors);
    }
    return t;
  }
  /**
   * @param {number} object
   * @return {?}
   */
  function extend(object) {
    /** @type {number} */
    var i = 1;
    for (; i < arguments.length; i++) {
      var obj = null != arguments[i] ? arguments[i] : {};
      if (i % 2) {
        assign(Object(obj), true).forEach(function (name) {
          var ret;
          var key;
          var val;
          /** @type {number} */
          ret = object;
          val = obj[key = name];
          if (key in ret) {
            Object.defineProperty(ret, key, {
              value: val,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            ret[key] = val;
          }
        });
      } else {
        if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(object, Object.getOwnPropertyDescriptors(obj));
        } else {
          assign(Object(obj)).forEach(function (prop) {
            Object.defineProperty(object, prop, Object.getOwnPropertyDescriptor(obj, prop));
          });
        }
      }
    }
    return object;
  }
  /**
   * @param {?} duration
   * @return {?}
   */
  function transitionEndEmulator(duration) {
    var _this = this;
    /** @type {boolean} */
    var n = false;
    return $(this).one(Util.TRANSITION_END, function () {
      /** @type {boolean} */
      n = true;
    }), setTimeout(function () {
      if (!n) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration), this;
  }
  /**
   * @param {!Array} text
   * @param {!Object} r
   * @param {boolean} callback
   * @return {?}
   */
  function parse(text, r, callback) {
    if (0 === text.length) {
      return text;
    }
    if (callback && "function" == typeof callback) {
      return callback(text);
    }
    var doc = (new window.DOMParser).parseFromString(text, "text/html");
    /** @type {!Array<string>} */
    var rowValue = Object.keys(r);
    /** @type {!Array<?>} */
    var models = [].slice.call(doc.body.querySelectorAll("*"));
    /**
     * @param {number} i
     * @return {?}
     */
    var run = function (i) {
      var e = models[i];
      var TO_STRING = e.nodeName.toLowerCase();
      if (-1 === rowValue.indexOf(e.nodeName.toLowerCase())) {
        return e.parentNode.removeChild(e), "continue";
      }
      /** @type {!Array<?>} */
      var pipelets = [].slice.call(e.attributes);
      /** @type {!Array<?>} */
      var uboard = [].concat(r["*"] || [], r[TO_STRING] || []);
      pipelets.forEach(function (a) {
        if (!function (el, e) {
          var source = el.nodeName.toLowerCase();
          if (-1 !== e.indexOf(source)) {
            return -1 === keys.indexOf(source) || Boolean(el.nodeValue.match(METADATA_REGEX) || el.nodeValue.match(regNamedQueries));
          }
          /** @type {!Array<?>} */
          var value = e.filter(function (cached1) {
            return cached1 instanceof RegExp;
          });
          /** @type {number} */
          var j = 0;
          /** @type {number} */
          var i = value.length;
          for (; j < i; j++) {
            if (source.match(value[j])) {
              return true;
            }
          }
          return false;
        }(a, uboard)) {
          e.removeAttribute(a.nodeName);
        }
      });
    };
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    var l = models.length;
    for (; i < l; i++) {
      run(i);
    }
    return doc.body.innerHTML;
  }
  $ = $ && $.hasOwnProperty("default") ? $.default : $;
  obj = obj && obj.hasOwnProperty("default") ? obj.default : obj;
  /** @type {string} */
  var e = "transitionend";
  var Util = {
    TRANSITION_END: "bsTransitionEnd",
    getUID: function (id) {
      for (; id = id + ~~(1e6 * Math.random()), document.getElementById(id);) {
      }
      return id;
    },
    getSelectorFromElement: function (element) {
      var selector = element.getAttribute("data-target");
      if (!selector || "#" === selector) {
        var c = element.getAttribute("href");
        selector = c && "#" !== c ? c.trim() : "";
      }
      try {
        return document.querySelector(selector) ? selector : null;
      } catch (t) {
        return null;
      }
    },
    getTransitionDurationFromElement: function (obj) {
      if (!obj) {
        return 0;
      }
      var a = $(obj).css("transition-duration");
      var b = $(obj).css("transition-delay");
      /** @type {number} */
      var i = parseFloat(a);
      /** @type {number} */
      var level = parseFloat(b);
      return i || level ? (a = a.split(",")[0], b = b.split(",")[0], 1e3 * (parseFloat(a) + parseFloat(b))) : 0;
    },
    reflow: function (element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function (element) {
      $(element).trigger(e);
    },
    supportsTransitionEnd: function () {
      return Boolean(e);
    },
    isElement: function (obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function (name, config, data) {
      var i;
      for (i in data) {
        if (Object.prototype.hasOwnProperty.call(data, i)) {
          var rule = data[i];
          var value = config[i];
          /** @type {string} */
          var source = value && Util.isElement(value) ? "element" : (trigger = value, {}.toString.call(trigger).match(/\s([a-z]+)/i)[1].toLowerCase());
          if (!(new RegExp(rule)).test(source)) {
            throw new Error(name.toUpperCase() + ': Option "' + i + '" provided type "' + source + '" but expected type "' + rule + '".');
          }
        }
      }
      var trigger;
    },
    findShadowRoot: function (node) {
      if (!document.documentElement.attachShadow) {
        return null;
      }
      if ("function" != typeof node.getRootNode) {
        return node instanceof ShadowRoot ? node : node.parentNode ? Util.findShadowRoot(node.parentNode) : null;
      }
      var root = node.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    },
    jQueryDetection: function () {
      if ("undefined" == typeof $) {
        throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
      }
      var t = $.fn.jquery.split(" ")[0].split(".");
      if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || 4 <= t[0]) {
        throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
      }
    }
  };
  Util.jQueryDetection();
  /** @type {function(?): ?} */
  $.fn.emulateTransitionEnd = transitionEndEmulator;
  $.event.special[Util.TRANSITION_END] = {
    bindType: e,
    delegateType: e,
    handle: function (event) {
      if ($(event.target).is(this)) {
        return event.handleObj.handler.apply(this, arguments);
      }
    }
  };
  /** @type {string} */
  var type = "alert";
  /** @type {string} */
  var dataKey = "bs.alert";
  /** @type {string} */
  var versionKey = "." + dataKey;
  var msg_t = $.fn[type];
  var me = {
    CLOSE: "close" + versionKey,
    CLOSED: "closed" + versionKey,
    CLICK_DATA_API: "click" + versionKey + ".data-api"
  };
  /** @type {string} */
  var status = "alert";
  /** @type {string} */
  var CLASS_FADE = "fade";
  /** @type {string} */
  var showClass = "show";
  var Alert = function () {
    /**
     * @param {string} selector
     * @return {undefined}
     */
    function Alert(selector) {
      /** @type {string} */
      this._element = selector;
    }
    var self = Alert.prototype;
    return self.close = function (element) {
      var $target = this._element;
      if (element) {
        $target = this._getRootElement(element);
      }
      if (!this._triggerCloseEvent($target).isDefaultPrevented()) {
        this._removeElement($target);
      }
    }, self.dispose = function () {
      $.removeData(this._element, dataKey);
      /** @type {null} */
      this._element = null;
    }, self._getRootElement = function (element) {
      var n = Util.getSelectorFromElement(element);
      /** @type {boolean} */
      var e = false;
      return n && (e = document.querySelector(n)), e = e || $(element).closest("." + status)[0];
    }, self._triggerCloseEvent = function (element) {
      var e = $.Event(me.CLOSE);
      return $(element).trigger(e), e;
    }, self._removeElement = function (element) {
      var d = this;
      if ($(element).removeClass(showClass), $(element).hasClass(CLASS_FADE)) {
        var time = Util.getTransitionDurationFromElement(element);
        $(element).one(Util.TRANSITION_END, function (simpleFilter) {
          return d._destroyElement(element, simpleFilter);
        }).emulateTransitionEnd(time);
      } else {
        this._destroyElement(element);
      }
    }, self._destroyElement = function (element) {
      $(element).detach().trigger(me.CLOSED).remove();
    }, Alert._jQueryInterface = function (value) {
      return this.each(function () {
        var $el = $(this);
        var data = $el.data(dataKey);
        if (!data) {
          data = new Alert(this);
          $el.data(dataKey, data);
        }
        if ("close" === value) {
          data[value](this);
        }
      });
    }, Alert._handleDismiss = function (alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }
        alertInstance.close(this);
      };
    }, _createClass(Alert, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }]), Alert;
  }();
  $(document).on(me.CLICK_DATA_API, '[data-dismiss="alert"]', Alert._handleDismiss(new Alert));
  $.fn[type] = Alert._jQueryInterface;
  $.fn[type].Constructor = Alert;
  /**
   * @return {?}
   */
  $.fn[type].noConflict = function () {
    return $.fn[type] = msg_t, Alert._jQueryInterface;
  };
  /** @type {string} */
  var reverseKey = "button";
  /** @type {string} */
  var selected = "bs.button";
  /** @type {string} */
  var cls = "." + selected;
  /** @type {string} */
  var DATA_API_KEY = ".data-api";
  var reaction = $.fn[reverseKey];
  /** @type {string} */
  var val = "active";
  /** @type {string} */
  var boardClass = "btn";
  /** @type {string} */
  var _openClass = "focus";
  /** @type {string} */
  var nodeContentSelector = '[data-toggle^="button"]';
  /** @type {string} */
  var editableSelector = '[data-toggle="buttons"]';
  /** @type {string} */
  var CONTROLLER_SELECTOR = '[data-toggle="button"]';
  /** @type {string} */
  var ACTION_SELECTOR = '[data-toggle="buttons"] .btn';
  /** @type {string} */
  var element = 'input:not([type="hidden"])';
  /** @type {string} */
  var SELECTOR_SLIDER_LEFT = ".active";
  /** @type {string} */
  var toolbarItemSelector = ".btn";
  var currentTogle = {
    CLICK_DATA_API: "click" + cls + DATA_API_KEY,
    FOCUS_BLUR_DATA_API: "focus" + cls + DATA_API_KEY + " blur" + cls + DATA_API_KEY,
    LOAD_DATA_API: "load" + cls + DATA_API_KEY
  };
  var Button = function () {
    /**
     * @param {!Element} element
     * @return {undefined}
     */
    function Tab(element) {
      /** @type {!Element} */
      this._element = element;
    }
    var proto = Tab.prototype;
    return proto.toggle = function () {
      /** @type {boolean} */
      var t = true;
      /** @type {boolean} */
      var e = true;
      var cell = $(this._element).closest(editableSelector)[0];
      if (cell) {
        var elem = this._element.querySelector(element);
        if (elem) {
          if ("radio" === elem.type) {
            if (elem.checked && this._element.classList.contains(val)) {
              /** @type {boolean} */
              t = false;
            } else {
              var customPlayerControlsButton = cell.querySelector(SELECTOR_SLIDER_LEFT);
              if (customPlayerControlsButton) {
                $(customPlayerControlsButton).removeClass(val);
              }
            }
          } else {
            if ("checkbox" === elem.type) {
              if ("LABEL" === this._element.tagName && elem.checked === this._element.classList.contains(val)) {
                /** @type {boolean} */
                t = false;
              }
            } else {
              /** @type {boolean} */
              t = false;
            }
          }
          if (t) {
            /** @type {boolean} */
            elem.checked = !this._element.classList.contains(val);
            $(elem).trigger("change");
          }
          elem.focus();
          /** @type {boolean} */
          e = false;
        }
      }
      if (!(this._element.hasAttribute("disabled") || this._element.classList.contains("disabled"))) {
        if (e) {
          this._element.setAttribute("aria-pressed", !this._element.classList.contains(val));
        }
        if (t) {
          $(this._element).toggleClass(val);
        }
      }
    }, proto.dispose = function () {
      $.removeData(this._element, selected);
      /** @type {null} */
      this._element = null;
    }, Tab._jQueryInterface = function (off) {
      return this.each(function () {
        var data = $(this).data(selected);
        if (!data) {
          data = new Tab(this);
          $(this).data(selected, data);
        }
        if ("toggle" === off) {
          data[off]();
        }
      });
    }, _createClass(Tab, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }]), Tab;
  }();
  $(document).on(currentTogle.CLICK_DATA_API, nodeContentSelector, function (event) {
    var node = event.target;
    if ($(node).hasClass(boardClass) || (node = $(node).closest(toolbarItemSelector)[0]), !node || node.hasAttribute("disabled") || node.classList.contains("disabled")) {
      event.preventDefault();
    } else {
      var propertyElement = node.querySelector(element);
      if (propertyElement && (propertyElement.hasAttribute("disabled") || propertyElement.classList.contains("disabled"))) {
        return void event.preventDefault();
      }
      Button._jQueryInterface.call($(node), "toggle");
    }
  }).on(currentTogle.FOCUS_BLUR_DATA_API, nodeContentSelector, function (t) {
    var upCtrl = $(t.target).closest(toolbarItemSelector)[0];
    $(upCtrl).toggleClass(_openClass, /^focus(in)?$/.test(t.type));
  });
  $(window).on(currentTogle.LOAD_DATA_API, function () {
    /** @type {!Array<?>} */
    var data = [].slice.call(document.querySelectorAll(ACTION_SELECTOR));
    /** @type {number} */
    var i = 0;
    /** @type {number} */
    var nbElts = data.length;
    for (; i < nbElts; i++) {
      var a = data[i];
      var o = a.querySelector(element);
      if (o.checked || o.hasAttribute("checked")) {
        a.classList.add(val);
      } else {
        a.classList.remove(val);
      }
    }
    /** @type {number} */
    var p = 0;
    /** @type {number} */
    var aOpL = (data = [].slice.call(document.querySelectorAll(CONTROLLER_SELECTOR))).length;
    for (; p < aOpL; p++) {
      var target = data[p];
      if ("true" === target.getAttribute("aria-pressed")) {
        target.classList.add(val);
      } else {
        target.classList.remove(val);
      }
    }
  });
  $.fn[reverseKey] = Button._jQueryInterface;
  $.fn[reverseKey].Constructor = Button;
  /**
   * @return {?}
   */
  $.fn[reverseKey].noConflict = function () {
    return $.fn[reverseKey] = reaction, Button._jQueryInterface;
  };
  /** @type {string} */
  var i = "carousel";
  /** @type {string} */
  var NAMESPACE = "bs.carousel";
  /** @type {string} */
  var NS = "." + NAMESPACE;
  /** @type {string} */
  var _option = ".data-api";
  var modelChainCount = $.fn[i];
  var Default = {
    interval: 5E3,
    keyboard: true,
    slide: false,
    pause: "hover",
    wrap: true,
    touch: true
  };
  var DefaultType = {
    interval: "(number|boolean)",
    keyboard: "boolean",
    slide: "(boolean|string)",
    pause: "(string|boolean)",
    wrap: "boolean",
    touch: "boolean"
  };
  /** @type {string} */
  var next = "next";
  /** @type {string} */
  var DIRECTION_DOWN = "prev";
  /** @type {string} */
  var align = "left";
  /** @type {string} */
  var openDir = "right";
  var events = {
    SLIDE: "slide" + NS,
    SLID: "slid" + NS,
    KEYDOWN: "keydown" + NS,
    MOUSEENTER: "mouseenter" + NS,
    MOUSELEAVE: "mouseleave" + NS,
    TOUCHSTART: "touchstart" + NS,
    TOUCHMOVE: "touchmove" + NS,
    TOUCHEND: "touchend" + NS,
    POINTERDOWN: "pointerdown" + NS,
    POINTERUP: "pointerup" + NS,
    DRAG_START: "dragstart" + NS,
    LOAD_DATA_API: "load" + NS + _option,
    CLICK_DATA_API: "click" + NS + _option
  };
  /** @type {string} */
  var parent = "carousel";
  /** @type {string} */
  var className = "active";
  /** @type {string} */
  var s = "slide";
  /** @type {string} */
  var w = "carousel-item-right";
  /** @type {string} */
  var Composite = "carousel-item-left";
  /** @type {string} */
  var MOUSE_LEFT_BUTTON_PRESSED = "carousel-item-next";
  /** @type {string} */
  var p = "carousel-item-prev";
  /** @type {string} */
  var entrytwo = "pointer-event";
  /** @type {string} */
  var freezeSelector = ".active";
  /** @type {string} */
  var width = ".active.carousel-item";
  /** @type {string} */
  var bodyScripts = ".carousel-item";
  /** @type {string} */
  var ctx = ".carousel-item img";
  /** @type {string} */
  var containerElement = ".carousel-item-next, .carousel-item-prev";
  /** @type {string} */
  var canvas = ".carousel-indicators";
  /** @type {string} */
  var reconnectingCallback = "[data-slide], [data-slide-to]";
  /** @type {string} */
  var baseSelector = '[data-ride="carousel"]';
  var data = {
    TOUCH: "touch",
    PEN: "pen"
  };
  var Carousel = function () {
    /**
     * @param {!Element} selector
     * @param {?} config
     * @return {undefined}
     */
    function Carousel(selector, config) {
      /** @type {null} */
      this._items = null;
      /** @type {null} */
      this._interval = null;
      /** @type {null} */
      this._activeElement = null;
      /** @type {boolean} */
      this._isPaused = false;
      /** @type {boolean} */
      this._isSliding = false;
      /** @type {null} */
      this.touchTimeout = null;
      /** @type {number} */
      this.touchStartX = 0;
      /** @type {number} */
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      /** @type {!Element} */
      this._element = selector;
      this._indicatorsElement = this._element.querySelector(canvas);
      /** @type {boolean} */
      this._touchSupported = "ontouchstart" in document.documentElement || 0 < navigator.maxTouchPoints;
      /** @type {boolean} */
      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
      this._addEventListeners();
    }
    var self = Carousel.prototype;
    return self.next = function () {
      if (!this._isSliding) {
        this._slide(next);
      }
    }, self.nextWhenVisible = function () {
      if (!document.hidden && $(this._element).is(":visible") && "hidden" !== $(this._element).css("visibility")) {
        this.next();
      }
    }, self.prev = function () {
      if (!this._isSliding) {
        this._slide(DIRECTION_DOWN);
      }
    }, self.pause = function (force) {
      if (!force) {
        /** @type {boolean} */
        this._isPaused = true;
      }
      if (this._element.querySelector(containerElement)) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }
      clearInterval(this._interval);
      /** @type {null} */
      this._interval = null;
    }, self.cycle = function (i) {
      if (!i) {
        /** @type {boolean} */
        this._isPaused = false;
      }
      if (this._interval) {
        clearInterval(this._interval);
        /** @type {null} */
        this._interval = null;
      }
      if (this._config.interval && !this._isPaused) {
        /** @type {number} */
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    }, self.to = function (index) {
      var e = this;
      this._activeElement = this._element.querySelector(width);
      var activeIndex = this._getItemIndex(this._activeElement);
      if (!(index > this._items.length - 1 || index < 0)) {
        if (this._isSliding) {
          $(this._element).one(events.SLID, function () {
            return e.to(index);
          });
        } else {
          if (activeIndex === index) {
            return this.pause(), void this.cycle();
          }
          /** @type {string} */
          var direction = activeIndex < index ? next : DIRECTION_DOWN;
          this._slide(direction, this._items[index]);
        }
      }
    }, self.dispose = function () {
      $(this._element).off(NS);
      $.removeData(this._element, NAMESPACE);
      /** @type {null} */
      this._items = null;
      /** @type {null} */
      this._config = null;
      /** @type {null} */
      this._element = null;
      /** @type {null} */
      this._interval = null;
      /** @type {null} */
      this._isPaused = null;
      /** @type {null} */
      this._isSliding = null;
      /** @type {null} */
      this._activeElement = null;
      /** @type {null} */
      this._indicatorsElement = null;
    }, self._getConfig = function (config) {
      return config = extend({}, Default, {}, config), Util.typeCheckConfig(i, config, DefaultType), config;
    }, self._handleSwipe = function () {
      /** @type {number} */
      var t = Math.abs(this.touchDeltaX);
      if (!(t <= 40)) {
        /** @type {number} */
        var tau = t / this.touchDeltaX;
        if ((this.touchDeltaX = 0) < tau) {
          this.prev();
        }
        if (tau < 0) {
          this.next();
        }
      }
    }, self._addEventListeners = function () {
      var that = this;
      if (this._config.keyboard) {
        $(this._element).on(events.KEYDOWN, function (event) {
          return that._keydown(event);
        });
      }
      if ("hover" === this._config.pause) {
        $(this._element).on(events.MOUSEENTER, function (value) {
          return that.pause(value);
        }).on(events.MOUSELEAVE, function (i) {
          return that.cycle(i);
        });
      }
      if (this._config.touch) {
        this._addTouchEventListeners();
      }
    }, self._addTouchEventListeners = function () {
      var self = this;
      if (this._touchSupported) {
        /**
         * @param {!KeyboardEvent} event
         * @return {undefined}
         */
        var _onTouchStart = function (event) {
          if (self._pointerEvent && data[event.originalEvent.pointerType.toUpperCase()]) {
            self.touchStartX = event.originalEvent.clientX;
          } else {
            if (!self._pointerEvent) {
              self.touchStartX = event.originalEvent.touches[0].clientX;
            }
          }
        };
        /**
         * @param {!KeyboardEvent} event
         * @return {undefined}
         */
        var cb = function (event) {
          if (self._pointerEvent && data[event.originalEvent.pointerType.toUpperCase()]) {
            /** @type {number} */
            self.touchDeltaX = event.originalEvent.clientX - self.touchStartX;
          }
          self._handleSwipe();
          if ("hover" === self._config.pause) {
            self.pause();
            if (self.touchTimeout) {
              clearTimeout(self.touchTimeout);
            }
            /** @type {number} */
            self.touchTimeout = setTimeout(function (i) {
              return self.cycle(i);
            }, 500 + self._config.interval);
          }
        };
        $(this._element.querySelectorAll(ctx)).on(events.DRAG_START, function (event) {
          return event.preventDefault();
        });
        if (this._pointerEvent) {
          $(this._element).on(events.POINTERDOWN, function (data) {
            return _onTouchStart(data);
          });
          $(this._element).on(events.POINTERUP, function (users) {
            return cb(users);
          });
          this._element.classList.add(entrytwo);
        } else {
          $(this._element).on(events.TOUCHSTART, function (data) {
            return _onTouchStart(data);
          });
          $(this._element).on(events.TOUCHMOVE, function (alreadyFailedWithException) {
            return function (e) {
              if (e.originalEvent.touches && 1 < e.originalEvent.touches.length) {
                /** @type {number} */
                self.touchDeltaX = 0;
              } else {
                /** @type {number} */
                self.touchDeltaX = e.originalEvent.touches[0].clientX - self.touchStartX;
              }
            }(alreadyFailedWithException);
          });
          $(this._element).on(events.TOUCHEND, function (users) {
            return cb(users);
          });
        }
      }
    }, self._keydown = function (event) {
      if (!/input|textarea/i.test(event.target.tagName)) {
        switch (event.which) {
          case 37:
            event.preventDefault();
            this.prev();
            break;
          case 39:
            event.preventDefault();
            this.next();
        }
      }
    }, self._getItemIndex = function (element) {
      return this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(bodyScripts)) : [], this._items.indexOf(element);
    }, self._getItemByDirection = function (direction, activeElement) {
      /** @type {boolean} */
      var isNextDirection = direction === next;
      /** @type {boolean} */
      var isPrevDirection = direction === DIRECTION_DOWN;
      var activeIndex = this._getItemIndex(activeElement);
      /** @type {number} */
      var lastItemIndex = this._items.length - 1;
      if ((isPrevDirection && 0 === activeIndex || isNextDirection && activeIndex === lastItemIndex) && !this._config.wrap) {
        return activeElement;
      }
      /** @type {number} */
      var name = (activeIndex + (direction === DIRECTION_DOWN ? -1 : 1)) % this._items.length;
      return -1 == name ? this._items[this._items.length - 1] : this._items[name];
    }, self._triggerSlideEvent = function (relatedTarget, directionalClassname) {
      var index = this._getItemIndex(relatedTarget);
      var MY_NUMBER = this._getItemIndex(this._element.querySelector(width));
      var aerisTopic = $.Event(events.SLIDE, {
        relatedTarget: relatedTarget,
        direction: directionalClassname,
        from: MY_NUMBER,
        to: index
      });
      return $(this._element).trigger(aerisTopic), aerisTopic;
    }, self._setActiveIndicatorElement = function (element) {
      if (this._indicatorsElement) {
        /** @type {!Array<?>} */
        var customPlayerControlsButton = [].slice.call(this._indicatorsElement.querySelectorAll(freezeSelector));
        $(customPlayerControlsButton).removeClass(className);
        var IFBox = this._indicatorsElement.children[this._getItemIndex(element)];
        if (IFBox) {
          $(IFBox).addClass(className);
        }
      }
    }, self._slide = function (direction, element) {
      var type;
      var name;
      var directionalClassName;
      var _this2 = this;
      var activeElement = this._element.querySelector(width);
      var pos = this._getItemIndex(activeElement);
      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
      var index = this._getItemIndex(nextElement);
      /** @type {boolean} */
      var isCycling = Boolean(this._interval);
      if (directionalClassName = direction === next ? (type = Composite, name = MOUSE_LEFT_BUTTON_PRESSED, align) : (type = w, name = p, openDir), nextElement && $(nextElement).hasClass(className)) {
        /** @type {boolean} */
        this._isSliding = false;
      } else {
        if (!this._triggerSlideEvent(nextElement, directionalClassName).isDefaultPrevented() && activeElement && nextElement) {
          /** @type {boolean} */
          this._isSliding = true;
          if (isCycling) {
            this.pause();
          }
          this._setActiveIndicatorElement(nextElement);
          var aerisTopic = $.Event(events.SLID, {
            relatedTarget: nextElement,
            direction: directionalClassName,
            from: pos,
            to: index
          });
          if ($(this._element).hasClass(s)) {
            $(nextElement).addClass(name);
            Util.reflow(nextElement);
            $(activeElement).addClass(type);
            $(nextElement).addClass(type);
            /** @type {number} */
            var value = parseInt(nextElement.getAttribute("data-interval"), 10);
            if (value) {
              this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
              /** @type {number} */
              this._config.interval = value;
            } else {
              this._config.interval = this._config.defaultInterval || this._config.interval;
            }
            var TRANSITION_DURATION = Util.getTransitionDurationFromElement(activeElement);
            $(activeElement).one(Util.TRANSITION_END, function () {
              $(nextElement).removeClass(type + " " + name).addClass(className);
              $(activeElement).removeClass(className + " " + name + " " + type);
              /** @type {boolean} */
              _this2._isSliding = false;
              setTimeout(function () {
                return $(_this2._element).trigger(aerisTopic);
              }, 0);
            }).emulateTransitionEnd(TRANSITION_DURATION);
          } else {
            $(activeElement).removeClass(className);
            $(nextElement).addClass(className);
            /** @type {boolean} */
            this._isSliding = false;
            $(this._element).trigger(aerisTopic);
          }
          if (isCycling) {
            this.cycle();
          }
        }
      }
    }, Carousel._jQueryInterface = function (value) {
      return this.each(function () {
        var data = $(this).data(NAMESPACE);
        var options = extend({}, Default, {}, $(this).data());
        if ("object" == typeof value) {
          options = extend({}, options, {}, value);
        }
        var id = "string" == typeof value ? value : options.slide;
        if (data || (data = new Carousel(this, options), $(this).data(NAMESPACE, data)), "number" == typeof value) {
          data.to(value);
        } else {
          if ("string" == typeof id) {
            if ("undefined" == typeof data[id]) {
              throw new TypeError('No method named "' + id + '"');
            }
            data[id]();
          } else {
            if (options.interval && options.ride) {
              data.pause();
              data.cycle();
            }
          }
        }
      });
    }, Carousel._dataApiClickHandler = function (event) {
      var e = Util.getSelectorFromElement(this);
      if (e) {
        var selector = $(e)[0];
        if (selector && $(selector).hasClass(parent)) {
          var modelData = extend({}, $(selector).data(), {}, $(this).data());
          var slideIndex = this.getAttribute("data-slide-to");
          if (slideIndex) {
            /** @type {boolean} */
            modelData.interval = false;
          }
          Carousel._jQueryInterface.call($(selector), modelData);
          if (slideIndex) {
            $(selector).data(NAMESPACE).to(slideIndex);
          }
          event.preventDefault();
        }
      }
    }, _createClass(Carousel, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return Default;
      }
    }]), Carousel;
  }();
  $(document).on(events.CLICK_DATA_API, reconnectingCallback, Carousel._dataApiClickHandler);
  $(window).on(events.LOAD_DATA_API, function () {
    /** @type {!Array<?>} */
    var input = [].slice.call(document.querySelectorAll(baseSelector));
    /** @type {number} */
    var a = 0;
    /** @type {number} */
    var Del = input.length;
    for (; a < Del; a++) {
      var i = $(input[a]);
      Carousel._jQueryInterface.call(i, i.data());
    }
  });
  $.fn[i] = Carousel._jQueryInterface;
  $.fn[i].Constructor = Carousel;
  /**
   * @return {?}
   */
  $.fn[i].noConflict = function () {
    return $.fn[i] = modelChainCount, Carousel._jQueryInterface;
  };
  /** @type {string} */
  var key = "collapse";
  /** @type {string} */
  var target = "bs.collapse";
  /** @type {string} */
  var ZUI_MODAL = "." + target;
  var mixingStore = $.fn[key];
  var conf = {
    toggle: true,
    parent: ""
  };
  var part = {
    toggle: "boolean",
    parent: "(string|element)"
  };
  var notes = {
    SHOW: "show" + ZUI_MODAL,
    SHOWN: "shown" + ZUI_MODAL,
    HIDE: "hide" + ZUI_MODAL,
    HIDDEN: "hidden" + ZUI_MODAL,
    CLICK_DATA_API: "click" + ZUI_MODAL + ".data-api"
  };
  /** @type {string} */
  var SHOW_CLASS = "show";
  /** @type {string} */
  var v = "collapse";
  /** @type {string} */
  var sVPassCls = "collapsing";
  /** @type {string} */
  var clsFancytreeCellNavMode = "collapsed";
  /** @type {string} */
  var prop = "width";
  /** @type {string} */
  var add = "height";
  /** @type {string} */
  var x = ".show, .collapsing";
  /** @type {string} */
  var selector = '[data-toggle="collapse"]';
  var Collapse = function () {
    /**
     * @param {!Object} el
     * @param {?} config
     * @return {undefined}
     */
    function Collapse(el, config) {
      /** @type {boolean} */
      this._isTransitioning = false;
      /** @type {!Object} */
      this._element = el;
      this._config = this._getConfig(config);
      /** @type {!Array<?>} */
      this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + el.id + '"],[data-toggle="collapse"][data-target="#' + el.id + '"]'));
      /** @type {!Array<?>} */
      var filtersChildren = [].slice.call(document.querySelectorAll(selector));
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var patchLen = filtersChildren.length;
      for (; i < patchLen; i++) {
        var element = filtersChildren[i];
        var selector = Util.getSelectorFromElement(element);
        /** @type {!Array<?>} */
        var expRecords = [].slice.call(document.querySelectorAll(selector)).filter(function (match) {
          return match === el;
        });
        if (null !== selector && 0 < expRecords.length) {
          this._selector = selector;
          this._triggerArray.push(element);
        }
      }
      this._parent = this._config.parent ? this._getParent() : null;
      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }
      if (this._config.toggle) {
        this.toggle();
      }
    }
    var _this = Collapse.prototype;
    return _this.toggle = function () {
      if ($(this._element).hasClass(SHOW_CLASS)) {
        this.hide();
      } else {
        this.show();
      }
    }, _this.show = function () {
      var parent;
      var node;
      var _this = this;
      if (!this._isTransitioning && !$(this._element).hasClass(SHOW_CLASS) && (this._parent && 0 === (parent = [].slice.call(this._parent.querySelectorAll(x)).filter(function (option) {
        return "string" == typeof _this._config.parent ? option.getAttribute("data-parent") === _this._config.parent : option.classList.contains(v);
      })).length && (parent = null), !(parent && (node = $(parent).not(this._selector).data(target)) && node._isTransitioning))) {
        var event = $.Event(notes.SHOW);
        if ($(this._element).trigger(event), !event.isDefaultPrevented()) {
          if (parent) {
            Collapse._jQueryInterface.call($(parent).not(this._selector), "hide");
            if (!node) {
              $(parent).data(target, null);
            }
          }
          var dimension = this._getDimension();
          $(this._element).removeClass(v).addClass(sVPassCls);
          /** @type {number} */
          this._element.style[dimension] = 0;
          if (this._triggerArray.length) {
            $(this._triggerArray).removeClass(clsFancytreeCellNavMode).attr("aria-expanded", true);
          }
          this.setTransitioning(true);
          /** @type {string} */
          var scrollSize = "scroll" + (dimension[0].toUpperCase() + dimension.slice(1));
          var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._element);
          $(this._element).one(Util.TRANSITION_END, function () {
            $(_this._element).removeClass(sVPassCls).addClass(v).addClass(SHOW_CLASS);
            /** @type {string} */
            _this._element.style[dimension] = "";
            _this.setTransitioning(false);
            $(_this._element).trigger(notes.SHOWN);
          }).emulateTransitionEnd(TRANSITION_DURATION);
          this._element.style[dimension] = this._element[scrollSize] + "px";
        }
      }
    }, _this.hide = function () {
      var _this2 = this;
      if (!this._isTransitioning && $(this._element).hasClass(SHOW_CLASS)) {
        var event = $.Event(notes.HIDE);
        if ($(this._element).trigger(event), !event.isDefaultPrevented()) {
          var dimension = this._getDimension();
          this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
          Util.reflow(this._element);
          $(this._element).addClass(sVPassCls).removeClass(v).removeClass(SHOW_CLASS);
          var behaviorTargetListSize = this._triggerArray.length;
          if (0 < behaviorTargetListSize) {
            /** @type {number} */
            var j = 0;
            for (; j < behaviorTargetListSize; j++) {
              var element = this._triggerArray[j];
              var selector = Util.getSelectorFromElement(element);
              if (null !== selector) {
                if (!$([].slice.call(document.querySelectorAll(selector))).hasClass(SHOW_CLASS)) {
                  $(element).addClass(clsFancytreeCellNavMode).attr("aria-expanded", false);
                }
              }
            }
          }
          this.setTransitioning(true);
          /** @type {string} */
          this._element.style[dimension] = "";
          var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._element);
          $(this._element).one(Util.TRANSITION_END, function () {
            _this2.setTransitioning(false);
            $(_this2._element).removeClass(sVPassCls).addClass(v).trigger(notes.HIDDEN);
          }).emulateTransitionEnd(TRANSITION_DURATION);
        }
      }
    }, _this.setTransitioning = function (isTransitioning) {
      /** @type {boolean} */
      this._isTransitioning = isTransitioning;
    }, _this.dispose = function () {
      $.removeData(this._element, target);
      /** @type {null} */
      this._config = null;
      /** @type {null} */
      this._parent = null;
      /** @type {null} */
      this._element = null;
      /** @type {null} */
      this._triggerArray = null;
      /** @type {null} */
      this._isTransitioning = null;
    }, _this._getConfig = function (config) {
      return (config = extend({}, conf, {}, config)).toggle = Boolean(config.toggle), Util.typeCheckConfig(key, config, part), config;
    }, _this._getDimension = function () {
      return $(this._element).hasClass(prop) ? prop : add;
    }, _this._getParent = function () {
      var target;
      var _this3 = this;
      if (Util.isElement(this._config.parent)) {
        target = this._config.parent;
        if ("undefined" != typeof this._config.parent.jquery) {
          target = this._config.parent[0];
        }
      } else {
        /** @type {(Element|null)} */
        target = document.querySelector(this._config.parent);
      }
      /** @type {string} */
      var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
      /** @type {!Array<?>} */
      var current_season = [].slice.call(target.querySelectorAll(selector));
      return $(current_season).each(function (canCreateDiscussions, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      }), target;
    }, _this._addAriaAndCollapsedClass = function (element, triggerArray) {
      var $bool = $(element).hasClass(SHOW_CLASS);
      if (triggerArray.length) {
        $(triggerArray).toggleClass(clsFancytreeCellNavMode, !$bool).attr("aria-expanded", $bool);
      }
    }, Collapse._getTargetFromElement = function (element) {
      var target = Util.getSelectorFromElement(element);
      return target ? document.querySelector(target) : null;
    }, Collapse._jQueryInterface = function (id) {
      return this.each(function () {
        var t = $(this);
        var data = t.data(target);
        var options = extend({}, conf, {}, t.data(), {}, "object" == typeof id && id ? id : {});
        if (!data && options.toggle && /show|hide/.test(id) && (options.toggle = false), data || (data = new Collapse(this, options), t.data(target, data)), "string" == typeof id) {
          if ("undefined" == typeof data[id]) {
            throw new TypeError('No method named "' + id + '"');
          }
          data[id]();
        }
      });
    }, _createClass(Collapse, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return conf;
      }
    }]), Collapse;
  }();
  $(document).on(notes.CLICK_DATA_API, selector, function (event) {
    if ("A" === event.currentTarget.tagName) {
      event.preventDefault();
    }
    var editingEl = $(this);
    var sel = Util.getSelectorFromElement(this);
    /** @type {!Array<?>} */
    var current_season = [].slice.call(document.querySelectorAll(sel));
    $(current_season).each(function () {
      var t = $(this);
      var option = t.data(target) ? "toggle" : editingEl.data();
      Collapse._jQueryInterface.call(t, option);
    });
  });
  $.fn[key] = Collapse._jQueryInterface;
  $.fn[key].Constructor = Collapse;
  /**
   * @return {?}
   */
  $.fn[key].noConflict = function () {
    return $.fn[key] = mixingStore, Collapse._jQueryInterface;
  };
  /** @type {string} */
  var pluginName = "dropdown";
  /** @type {string} */
  var index = "bs.dropdown";
  /** @type {string} */
  var id = "." + index;
  /** @type {string} */
  var _cwrc_datePicker = ".data-api";
  var fn = $.fn[pluginName];
  /** @type {!RegExp} */
  var base = new RegExp("38|40|27");
  var Event = {
    HIDE: "hide" + id,
    HIDDEN: "hidden" + id,
    SHOW: "show" + id,
    SHOWN: "shown" + id,
    CLICK: "click" + id,
    CLICK_DATA_API: "click" + id + _cwrc_datePicker,
    KEYDOWN_DATA_API: "keydown" + id + _cwrc_datePicker,
    KEYUP_DATA_API: "keyup" + id + _cwrc_datePicker
  };
  /** @type {string} */
  var DISABLED = "disabled";
  /** @type {string} */
  var node = "show";
  /** @type {string} */
  var CAL_DIS_M = "dropup";
  /** @type {string} */
  var CLS_BTN_WRAPPER = "dropright";
  /** @type {string} */
  var CLS_BTN_DISABLED = "dropleft";
  /** @type {string} */
  var n = "dropdown-menu-right";
  /** @type {string} */
  var classIdPrefix = "position-static";
  /** @type {string} */
  var div = '[data-toggle="dropdown"]';
  /** @type {string} */
  var universalCallback = ".dropdown form";
  /** @type {string} */
  var search = ".dropdown-menu";
  /** @type {string} */
  var CLASS_FILTER_TOGGLE = ".navbar-nav";
  /** @type {string} */
  var selectorEnq = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
  /** @type {string} */
  var end = "top-start";
  /** @type {string} */
  var _error = "top-end";
  /** @type {string} */
  var e6484 = "bottom-start";
  /** @type {string} */
  var realEvent = "bottom-end";
  /** @type {string} */
  var tmp = "right-start";
  /** @type {string} */
  var $ifaceNil = "left-start";
  var clientRequest = {
    offset: 0,
    flip: true,
    boundary: "scrollParent",
    reference: "toggle",
    display: "dynamic",
    popperConfig: null
  };
  var c1 = {
    offset: "(number|string|function)",
    flip: "boolean",
    boundary: "(string|element)",
    reference: "(string|element)",
    display: "string",
    popperConfig: "(null|object)"
  };
  var Dropdown = function () {
    /**
     * @param {string} el
     * @param {?} config
     * @return {undefined}
     */
    function Dropdown(el, config) {
      /** @type {string} */
      this._element = el;
      /** @type {null} */
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();
      this._addEventListeners();
    }
    var self = Dropdown.prototype;
    return self.toggle = function () {
      if (!this._element.disabled && !$(this._element).hasClass(DISABLED)) {
        var commentIsNotAlone = $(this._menu).hasClass(node);
        Dropdown._clearMenus();
        if (!commentIsNotAlone) {
          this.show(true);
        }
      }
    }, self.show = function (name) {
      if (void 0 === name && (name = false), !(this._element.disabled || $(this._element).hasClass(DISABLED) || $(this._menu).hasClass(node))) {
        var relatedTarget = {
          relatedTarget: this._element
        };
        var showEvent = $.Event(Event.SHOW, relatedTarget);
        var selector = Dropdown._getParentFromElement(this._element);
        if ($(selector).trigger(showEvent), !showEvent.isDefaultPrevented()) {
          if (!this._inNavbar && name) {
            if ("undefined" == typeof obj) {
              throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");
            }
            var target = this._element;
            if ("parent" === this._config.reference) {
              target = selector;
            } else {
              if (Util.isElement(this._config.reference)) {
                target = this._config.reference;
                if ("undefined" != typeof this._config.reference.jquery) {
                  target = this._config.reference[0];
                }
              }
            }
            if ("scrollParent" !== this._config.boundary) {
              $(selector).addClass(classIdPrefix);
            }
            this._popper = new obj(target, this._menu, this._getPopperConfig());
          }
          if ("ontouchstart" in document.documentElement && 0 === $(selector).closest(CLASS_FILTER_TOGGLE).length) {
            $(document.body).children().on("mouseover", null, $.noop);
          }
          this._element.focus();
          this._element.setAttribute("aria-expanded", true);
          $(this._menu).toggleClass(node);
          $(selector).toggleClass(node).trigger($.Event(Event.SHOWN, relatedTarget));
        }
      }
    }, self.hide = function () {
      if (!this._element.disabled && !$(this._element).hasClass(DISABLED) && $(this._menu).hasClass(node)) {
        var relatedTarget = {
          relatedTarget: this._element
        };
        var showEvent = $.Event(Event.HIDE, relatedTarget);
        var selector = Dropdown._getParentFromElement(this._element);
        $(selector).trigger(showEvent);
        if (!showEvent.isDefaultPrevented()) {
          if (this._popper) {
            this._popper.destroy();
          }
          $(this._menu).toggleClass(node);
          $(selector).toggleClass(node).trigger($.Event(Event.HIDDEN, relatedTarget));
        }
      }
    }, self.dispose = function () {
      $.removeData(this._element, index);
      $(this._element).off(id);
      /** @type {null} */
      this._element = null;
      if ((this._menu = null) !== this._popper) {
        this._popper.destroy();
        /** @type {null} */
        this._popper = null;
      }
    }, self.update = function () {
      this._inNavbar = this._detectNavbar();
      if (null !== this._popper) {
        this._popper.scheduleUpdate();
      }
    }, self._addEventListeners = function () {
      var projectsListView = this;
      $(this._element).on(Event.CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();
        projectsListView.toggle();
      });
    }, self._getConfig = function (config) {
      return config = extend({}, this.constructor.Default, {}, $(this._element).data(), {}, config), Util.typeCheckConfig(pluginName, config, this.constructor.DefaultType), config;
    }, self._getMenuElement = function () {
      if (!this._menu) {
        var head = Dropdown._getParentFromElement(this._element);
        if (head) {
          this._menu = head.querySelector(search);
        }
      }
      return this._menu;
    }, self._getPlacement = function () {
      var $target = $(this._element.parentNode);
      /** @type {string} */
      var e = e6484;
      return $target.hasClass(CAL_DIS_M) ? (e = end, $(this._menu).hasClass(n) && (e = _error)) : $target.hasClass(CLS_BTN_WRAPPER) ? e = tmp : $target.hasClass(CLS_BTN_DISABLED) ? e = $ifaceNil : $(this._menu).hasClass(n) && (e = realEvent), e;
    }, self._detectNavbar = function () {
      return 0 < $(this._element).closest(".navbar").length;
    }, self._getOffset = function () {
      var _this = this;
      var params = {};
      return "function" == typeof this._config.offset ? params.fn = function (params) {
        return params.offsets = extend({}, params.offsets, {}, _this._config.offset(params.offsets, _this._element) || {}), params;
      } : params.offset = this._config.offset, params;
    }, self._getPopperConfig = function () {
      var options = {
        placement: this._getPlacement(),
        modifiers: {
          offset: this._getOffset(),
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      };
      return "static" === this._config.display && (options.modifiers.applyStyle = {
        enabled: false
      }), extend({}, options, {}, this._config.popperConfig);
    }, Dropdown._jQueryInterface = function (config) {
      return this.each(function () {
        var opts = $(this).data(index);
        if (opts || (opts = new Dropdown(this, "object" == typeof config ? config : null), $(this).data(index, opts)), "string" == typeof config) {
          if ("undefined" == typeof opts[config]) {
            throw new TypeError('No method named "' + config + '"');
          }
          opts[config]();
        }
      });
    }, Dropdown._clearMenus = function (event) {
      if (!event || 3 !== event.which && ("keyup" !== event.type || 9 === event.which)) {
        /** @type {!Array<?>} */
        var toggles = [].slice.call(document.querySelectorAll(div));
        /** @type {number} */
        var i = 0;
        /** @type {number} */
        var l = toggles.length;
        for (; i < l; i++) {
          var _parent = Dropdown._getParentFromElement(toggles[i]);
          var child = $(toggles[i]).data(index);
          var args = {
            relatedTarget: toggles[i]
          };
          if (event && "click" === event.type && (args.clickEvent = event), child) {
            var m = child._menu;
            if ($(_parent).hasClass(node) && !(event && ("click" === event.type && /input|textarea/i.test(event.target.tagName) || "keyup" === event.type && 9 === event.which) && $.contains(_parent, event.target))) {
              var event = $.Event(Event.HIDE, args);
              $(_parent).trigger(event);
              if (!event.isDefaultPrevented()) {
                if ("ontouchstart" in document.documentElement) {
                  $(document.body).children().off("mouseover", null, $.noop);
                }
                toggles[i].setAttribute("aria-expanded", "false");
                if (child._popper) {
                  child._popper.destroy();
                }
                $(m).removeClass(node);
                $(_parent).removeClass(node).trigger($.Event(Event.HIDDEN, args));
              }
            }
          }
        }
      }
    }, Dropdown._getParentFromElement = function (element) {
      var e;
      var c = Util.getSelectorFromElement(element);
      return c && (e = document.querySelector(c)), e || element.parentNode;
    }, Dropdown._dataApiKeydownHandler = function (event) {
      if ((/input|textarea/i.test(event.target.tagName) ? !(32 === event.which || 27 !== event.which && (40 !== event.which && 38 !== event.which || $(event.target).closest(search).length)) : base.test(event.which)) && (event.preventDefault(), event.stopPropagation(), !this.disabled && !$(this).hasClass(DISABLED))) {
        var dom = Dropdown._getParentFromElement(this);
        var commentIsNotAlone = $(dom).hasClass(node);
        if (commentIsNotAlone || 27 !== event.which) {
          if (commentIsNotAlone && (!commentIsNotAlone || 27 !== event.which && 32 !== event.which)) {
            /** @type {!Array<?>} */
            var elem = [].slice.call(dom.querySelectorAll(selectorEnq)).filter(function (overlayId) {
              return $(overlayId).is(":visible");
            });
            if (0 !== elem.length) {
              /** @type {number} */
              var type = elem.indexOf(event.target);
              if (38 === event.which && 0 < type) {
                type--;
              }
              if (40 === event.which && type < elem.length - 1) {
                type++;
              }
              if (type < 0) {
                /** @type {number} */
                type = 0;
              }
              elem[type].focus();
            }
          } else {
            if (27 === event.which) {
              var elementA = dom.querySelector(div);
              $(elementA).trigger("focus");
            }
            $(this).trigger("click");
          }
        }
      }
    }, _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return clientRequest;
      }
    }, {
      key: "DefaultType",
      get: function () {
        return c1;
      }
    }]), Dropdown;
  }();
  $(document).on(Event.KEYDOWN_DATA_API, div, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, search, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, div, function (event) {
    event.preventDefault();
    event.stopPropagation();
    Dropdown._jQueryInterface.call($(this), "toggle");
  }).on(Event.CLICK_DATA_API, universalCallback, function (event) {
    event.stopPropagation();
  });
  $.fn[pluginName] = Dropdown._jQueryInterface;
  $.fn[pluginName].Constructor = Dropdown;
  /**
   * @return {?}
   */
  $.fn[pluginName].noConflict = function () {
    return $.fn[pluginName] = fn, Dropdown._jQueryInterface;
  };
  /** @type {string} */
  var method = "modal";
  /** @type {string} */
  var namespace = "bs.modal";
  /** @type {string} */
  var eventNamespace = "." + namespace;
  var superBackup = $.fn[method];
  var opts = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var src = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    focus: "boolean",
    show: "boolean"
  };
  var self = {
    HIDE: "hide" + eventNamespace,
    HIDE_PREVENTED: "hidePrevented" + eventNamespace,
    HIDDEN: "hidden" + eventNamespace,
    SHOW: "show" + eventNamespace,
    SHOWN: "shown" + eventNamespace,
    FOCUSIN: "focusin" + eventNamespace,
    RESIZE: "resize" + eventNamespace,
    CLICK_DISMISS: "click.dismiss" + eventNamespace,
    KEYDOWN_DISMISS: "keydown.dismiss" + eventNamespace,
    MOUSEUP_DISMISS: "mouseup.dismiss" + eventNamespace,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + eventNamespace,
    CLICK_DATA_API: "click" + eventNamespace + ".data-api"
  };
  /** @type {string} */
  var HAS_CHILDREN_CLASS = "modal-dialog-scrollable";
  /** @type {string} */
  var eClass = "modal-scrollbar-measure";
  /** @type {string} */
  var matchesClassName = "modal-backdrop";
  /** @type {string} */
  var OPENED_MODAL_CLASS = "modal-open";
  /** @type {string} */
  var row = "fade";
  /** @type {string} */
  var SHOW = "show";
  /** @type {string} */
  var enabledClassname = "modal-static";
  /** @type {string} */
  var scopeSelectors = ".modal-dialog";
  /** @type {string} */
  var query = ".modal-body";
  /** @type {string} */
  var hiCallback = '[data-toggle="modal"]';
  /** @type {string} */
  var atCloseCallback = '[data-dismiss="modal"]';
  /** @type {string} */
  var inactive = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
  /** @type {string} */
  var sel = ".sticky-top";
  var Modal = function () {
    /**
     * @param {!Object} element
     * @param {?} config
     * @return {undefined}
     */
    function Modal(element, config) {
      this._config = this._getConfig(config);
      /** @type {!Object} */
      this._element = element;
      this._dialog = element.querySelector(scopeSelectors);
      /** @type {null} */
      this._backdrop = null;
      /** @type {boolean} */
      this._isShown = false;
      /** @type {boolean} */
      this._isBodyOverflowing = false;
      /** @type {boolean} */
      this._ignoreBackdropClick = false;
      /** @type {boolean} */
      this._isTransitioning = false;
      /** @type {number} */
      this._scrollbarWidth = 0;
    }
    var _this = Modal.prototype;
    return _this.toggle = function (name) {
      return this._isShown ? this.hide() : this.show(name);
    }, _this.show = function (target) {
      var _this = this;
      if (!this._isShown && !this._isTransitioning) {
        if ($(this._element).hasClass(row)) {
          /** @type {boolean} */
          this._isTransitioning = true;
        }
        var event = $.Event(self.SHOW, {
          relatedTarget: target
        });
        $(this._element).trigger(event);
        if (!(this._isShown || event.isDefaultPrevented())) {
          /** @type {boolean} */
          this._isShown = true;
          this._checkScrollbar();
          this._setScrollbar();
          this._adjustDialog();
          this._setEscapeEvent();
          this._setResizeEvent();
          $(this._element).on(self.CLICK_DISMISS, atCloseCallback, function (div) {
            return _this.hide(div);
          });
          $(this._dialog).on(self.MOUSEDOWN_DISMISS, function () {
            $(_this._element).one(self.MOUSEUP_DISMISS, function (jEvent) {
              if ($(jEvent.target).is(_this._element)) {
                /** @type {boolean} */
                _this._ignoreBackdropClick = true;
              }
            });
          });
          this._showBackdrop(function () {
            return _this._showElement(target);
          });
        }
      }
    }, _this.hide = function (type) {
      var foreignControls = this;
      if (type && type.preventDefault(), this._isShown && !this._isTransitioning) {
        var event = $.Event(self.HIDE);
        if ($(this._element).trigger(event), this._isShown && !event.isDefaultPrevented()) {
          /** @type {boolean} */
          this._isShown = false;
          var dataGridNode = $(this._element).hasClass(row);
          if (dataGridNode && (this._isTransitioning = true), this._setEscapeEvent(), this._setResizeEvent(), $(document).off(self.FOCUSIN), $(this._element).removeClass(SHOW), $(this._element).off(self.CLICK_DISMISS), $(this._dialog).off(self.MOUSEDOWN_DISMISS), dataGridNode) {
            var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._element);
            $(this._element).one(Util.TRANSITION_END, function (reverseControl) {
              return foreignControls._hideModal(reverseControl);
            }).emulateTransitionEnd(TRANSITION_DURATION);
          } else {
            this._hideModal();
          }
        }
      }
    }, _this.dispose = function () {
      [window, this._element, this._dialog].forEach(function (evtDel) {
        return $(evtDel).off(eventNamespace);
      });
      $(document).off(self.FOCUSIN);
      $.removeData(this._element, namespace);
      /** @type {null} */
      this._config = null;
      /** @type {null} */
      this._element = null;
      /** @type {null} */
      this._dialog = null;
      /** @type {null} */
      this._backdrop = null;
      /** @type {null} */
      this._isShown = null;
      /** @type {null} */
      this._isBodyOverflowing = null;
      /** @type {null} */
      this._ignoreBackdropClick = null;
      /** @type {null} */
      this._isTransitioning = null;
      /** @type {null} */
      this._scrollbarWidth = null;
    }, _this.handleUpdate = function () {
      this._adjustDialog();
    }, _this._getConfig = function (config) {
      return config = extend({}, opts, {}, config), Util.typeCheckConfig(method, config, src), config;
    }, _this._triggerBackdropTransition = function () {
      var elm = this;
      if ("static" === this._config.backdrop) {
        var e = $.Event(self.HIDE_PREVENTED);
        if ($(this._element).trigger(e), e.defaultPrevented) {
          return;
        }
        this._element.classList.add(enabledClassname);
        var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, function () {
          elm._element.classList.remove(enabledClassname);
        }).emulateTransitionEnd(TRANSITION_DURATION);
        this._element.focus();
      } else {
        this.hide();
      }
    }, _this._showElement = function (relatedTarget) {
      /**
       * @return {undefined}
       */
      function transitionComplete() {
        if (_this._config.focus) {
          _this._element.focus();
        }
        /** @type {boolean} */
        _this._isTransitioning = false;
        $(_this._element).trigger(aerisTopic);
      }
      var _this = this;
      var dataGridNode = $(this._element).hasClass(row);
      var winHints = this._dialog ? this._dialog.querySelector(query) : null;
      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE)) {
        document.body.appendChild(this._element);
      }
      /** @type {string} */
      this._element.style.display = "block";
      this._element.removeAttribute("aria-hidden");
      this._element.setAttribute("aria-modal", true);
      if ($(this._dialog).hasClass(HAS_CHILDREN_CLASS) && winHints) {
        /** @type {number} */
        winHints.scrollTop = 0;
      } else {
        /** @type {number} */
        this._element.scrollTop = 0;
      }
      if (dataGridNode) {
        Util.reflow(this._element);
      }
      $(this._element).addClass(SHOW);
      if (this._config.focus) {
        this._enforceFocus();
      }
      var aerisTopic = $.Event(self.SHOWN, {
        relatedTarget: relatedTarget
      });
      if (dataGridNode) {
        var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._dialog);
        $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        transitionComplete();
      }
    }, _this._enforceFocus = function () {
      var _this9 = this;
      $(document).off(self.FOCUSIN).on(self.FOCUSIN, function (event) {
        if (document !== event.target && _this9._element !== event.target && 0 === $(_this9._element).has(event.target).length) {
          _this9._element.focus();
        }
      });
    }, _this._setEscapeEvent = function () {
      var e = this;
      if (this._isShown && this._config.keyboard) {
        $(this._element).on(self.KEYDOWN_DISMISS, function (event) {
          if (27 === event.which) {
            e._triggerBackdropTransition();
          }
        });
      } else {
        if (!this._isShown) {
          $(this._element).off(self.KEYDOWN_DISMISS);
        }
      }
    }, _this._setResizeEvent = function () {
      var modal = this;
      if (this._isShown) {
        $(window).on(self.RESIZE, function (data) {
          return modal.handleUpdate(data);
        });
      } else {
        $(window).off(self.RESIZE);
      }
    }, _this._hideModal = function () {
      var _this11 = this;
      /** @type {string} */
      this._element.style.display = "none";
      this._element.setAttribute("aria-hidden", true);
      this._element.removeAttribute("aria-modal");
      /** @type {boolean} */
      this._isTransitioning = false;
      this._showBackdrop(function () {
        $(document.body).removeClass(OPENED_MODAL_CLASS);
        _this11._resetAdjustments();
        _this11._resetScrollbar();
        $(_this11._element).trigger(self.HIDDEN);
      });
    }, _this._removeBackdrop = function () {
      if (this._backdrop) {
        $(this._backdrop).remove();
        /** @type {null} */
        this._backdrop = null;
      }
    }, _this._showBackdrop = function (callback) {
      var _this12 = this;
      /** @type {string} */
      var path = $(this._element).hasClass(row) ? row : "";
      if (this._isShown && this._config.backdrop) {
        if (this._backdrop = document.createElement("div"), this._backdrop.className = matchesClassName, path && this._backdrop.classList.add(path), $(this._backdrop).appendTo(document.body), $(this._element).on(self.CLICK_DISMISS, function (event) {
          if (_this12._ignoreBackdropClick) {
            /** @type {boolean} */
            _this12._ignoreBackdropClick = false;
          } else {
            if (event.target === event.currentTarget) {
              _this12._triggerBackdropTransition();
            }
          }
        }), path && Util.reflow(this._backdrop), $(this._backdrop).addClass(SHOW), !callback) {
          return;
        }
        if (!path) {
          return void callback();
        }
        var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._backdrop);
        $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        if (!this._isShown && this._backdrop) {
          $(this._backdrop).removeClass(SHOW);
          /**
           * @return {undefined}
           */
          var callbackRemove = function () {
            _this12._removeBackdrop();
            if (callback) {
              callback();
            }
          };
          if ($(this._element).hasClass(row)) {
            var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._backdrop);
            $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(TRANSITION_DURATION);
          } else {
            callbackRemove();
          }
        } else {
          if (callback) {
            callback();
          }
        }
      }
    }, _this._adjustDialog = function () {
      /** @type {boolean} */
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      if (!this._isBodyOverflowing && isModalOverflowing) {
        /** @type {string} */
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }
      if (this._isBodyOverflowing && !isModalOverflowing) {
        /** @type {string} */
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    }, _this._resetAdjustments = function () {
      /** @type {string} */
      this._element.style.paddingLeft = "";
      /** @type {string} */
      this._element.style.paddingRight = "";
    }, _this._checkScrollbar = function () {
      /** @type {!ClientRect} */
      var anchorBoundingBoxViewport = document.body.getBoundingClientRect();
      /** @type {boolean} */
      this._isBodyOverflowing = anchorBoundingBoxViewport.left + anchorBoundingBoxViewport.right < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    }, _this._setScrollbar = function () {
      var embedPlayer = this;
      if (this._isBodyOverflowing) {
        /** @type {!Array<?>} */
        var current_season = [].slice.call(document.querySelectorAll(inactive));
        /** @type {!Array<?>} */
        var replacesStatements = [].slice.call(document.querySelectorAll(sel));
        $(current_season).each(function (canCreateDiscussions, elem) {
          var value = elem.style.paddingRight;
          var paddingRight = $(elem).css("padding-right");
          $(elem).data("padding-right", value).css("padding-right", parseFloat(paddingRight) + embedPlayer._scrollbarWidth + "px");
        });
        $(replacesStatements).each(function (canCreateDiscussions, link) {
          var overlayID = link.style.marginRight;
          var notificationData = $(link).css("margin-right");
          $(link).data("margin-right", overlayID).css("margin-right", parseFloat(notificationData) - embedPlayer._scrollbarWidth + "px");
        });
        /** @type {(number|string)} */
        var value = document.body.style.paddingRight;
        var paddingRight = $(document.body).css("padding-right");
        $(document.body).data("padding-right", value).css("padding-right", parseFloat(paddingRight) + this._scrollbarWidth + "px");
      }
      $(document.body).addClass(OPENED_MODAL_CLASS);
    }, _this._resetScrollbar = function () {
      /** @type {!Array<?>} */
      var current_season = [].slice.call(document.querySelectorAll(inactive));
      $(current_season).each(function (canCreateDiscussions, elem) {
        var padding = $(elem).data("padding-right");
        $(elem).removeData("padding-right");
        elem.style.paddingRight = padding || "";
      });
      /** @type {!Array<?>} */
      var replacesStatements = [].slice.call(document.querySelectorAll("" + sel));
      $(replacesStatements).each(function (canCreateDiscussions, e) {
        var type = $(e).data("margin-right");
        if ("undefined" != typeof type) {
          $(e).css("margin-right", type).removeData("margin-right");
        }
      });
      var padding = $(document.body).data("padding-right");
      $(document.body).removeData("padding-right");
      document.body.style.paddingRight = padding || "";
    }, _this._getScrollbarWidth = function () {
      /** @type {!Element} */
      var el = document.createElement("div");
      /** @type {string} */
      el.className = eClass;
      document.body.appendChild(el);
      /** @type {number} */
      var $ = el.getBoundingClientRect().width - el.clientWidth;
      return document.body.removeChild(el), $;
    }, Modal._jQueryInterface = function (name, option) {
      return this.each(function () {
        var data = $(this).data(namespace);
        var options = extend({}, opts, {}, $(this).data(), {}, "object" == typeof name && name ? name : {});
        if (data || (data = new Modal(this, options), $(this).data(namespace, data)), "string" == typeof name) {
          if ("undefined" == typeof data[name]) {
            throw new TypeError('No method named "' + name + '"');
          }
          data[name](option);
        } else {
          if (options.show) {
            data.show(option);
          }
        }
      });
    }, _createClass(Modal, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return opts;
      }
    }]), Modal;
  }();
  $(document).on(self.CLICK_DATA_API, hiCallback, function (event) {
    var i;
    var focusTarget = this;
    var navigate_rule = Util.getSelectorFromElement(this);
    if (navigate_rule) {
      /** @type {(Element|null)} */
      i = document.querySelector(navigate_rule);
    }
    var option = $(i).data(namespace) ? "toggle" : extend({}, $(i).data(), {}, $(this).data());
    if (!("A" !== this.tagName && "AREA" !== this.tagName)) {
      event.preventDefault();
    }
    var $target = $(i).one(self.SHOW, function (event) {
      if (!event.isDefaultPrevented()) {
        $target.one(self.HIDDEN, function () {
          if ($(focusTarget).is(":visible")) {
            focusTarget.focus();
          }
        });
      }
    });
    Modal._jQueryInterface.call($(i), option, this);
  });
  $.fn[method] = Modal._jQueryInterface;
  $.fn[method].Constructor = Modal;
  /**
   * @return {?}
   */
  $.fn[method].noConflict = function () {
    return $.fn[method] = superBackup, Modal._jQueryInterface;
  };
  /** @type {!Array} */
  var keys = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"];
  var voidElements = {
    "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
    a: ["target", "href", "title", "rel"],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  /** @type {!RegExp} */
  var METADATA_REGEX = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  /** @type {!RegExp} */
  var regNamedQueries = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
  /** @type {string} */
  var name = "tooltip";
  /** @type {string} */
  var schema = "bs.tooltip";
  /** @type {string} */
  var ns = "." + schema;
  var last_supr = $.fn[name];
  /** @type {string} */
  var value = "bs-tooltip";
  /** @type {!RegExp} */
  var fileRExp = new RegExp("(^|\\s)" + value + "\\S+", "g");
  /** @type {!Array} */
  var _activeValues = ["sanitize", "whiteList", "sanitizeFn"];
  var options = {
    animation: "boolean",
    template: "string",
    title: "(string|element|function)",
    trigger: "string",
    delay: "(number|object)",
    html: "boolean",
    selector: "(string|boolean)",
    placement: "(string|function)",
    offset: "(number|string|function)",
    container: "(string|element|boolean)",
    fallbackPlacement: "(string|array)",
    boundary: "(string|element)",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    whiteList: "object",
    popperConfig: "(null|object)"
  };
  var KEYS = {
    AUTO: "auto",
    TOP: "top",
    RIGHT: "right",
    BOTTOM: "bottom",
    LEFT: "left"
  };
  var defaults = {
    animation: true,
    template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: false,
    selector: false,
    placement: "top",
    offset: 0,
    container: false,
    fallbackPlacement: "flip",
    boundary: "scrollParent",
    sanitize: true,
    sanitizeFn: null,
    whiteList: voidElements,
    popperConfig: null
  };
  /** @type {string} */
  var undefined = "show";
  /** @type {string} */
  var COMPONENT_LITERAL = "out";
  var expectedDropEffect = {
    HIDE: "hide" + ns,
    HIDDEN: "hidden" + ns,
    SHOW: "show" + ns,
    SHOWN: "shown" + ns,
    INSERTED: "inserted" + ns,
    CLICK: "click" + ns,
    FOCUSIN: "focusin" + ns,
    FOCUSOUT: "focusout" + ns,
    MOUSEENTER: "mouseenter" + ns,
    MOUSELEAVE: "mouseleave" + ns
  };
  /** @type {string} */
  var animation = "fade";
  /** @type {string} */
  var hideClass = "show";
  /** @type {string} */
  var option = ".tooltip-inner";
  /** @type {string} */
  var this_area = ".arrow";
  /** @type {string} */
  var read = "hover";
  /** @type {string} */
  var peek = "focus";
  /** @type {string} */
  var check = "click";
  /** @type {string} */
  var hover = "manual";
  var Tooltip = function () {
    /**
     * @param {!Element} el
     * @param {?} config
     * @return {undefined}
     */
    function Tooltip(el, config) {
      if ("undefined" == typeof obj) {
        throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");
      }
      /** @type {boolean} */
      this._isEnabled = true;
      /** @type {number} */
      this._timeout = 0;
      /** @type {string} */
      this._hoverState = "";
      this._activeTrigger = {};
      /** @type {null} */
      this._popper = null;
      /** @type {!Element} */
      this.element = el;
      this.config = this._getConfig(config);
      /** @type {null} */
      this.tip = null;
      this._setListeners();
    }
    var context = Tooltip.prototype;
    return context.enable = function () {
      /** @type {boolean} */
      this._isEnabled = true;
    }, context.disable = function () {
      /** @type {boolean} */
      this._isEnabled = false;
    }, context.toggleEnabled = function () {
      /** @type {boolean} */
      this._isEnabled = !this._isEnabled;
    }, context.toggle = function (e) {
      if (this._isEnabled) {
        if (e) {
          var dataKey = this.constructor.DATA_KEY;
          var context = $(e.currentTarget).data(dataKey);
          if (!context) {
            context = new this.constructor(e.currentTarget, this._getDelegateConfig());
            $(e.currentTarget).data(dataKey, context);
          }
          /** @type {boolean} */
          context._activeTrigger.click = !context._activeTrigger.click;
          if (context._isWithActiveTrigger()) {
            context._enter(null, context);
          } else {
            context._leave(null, context);
          }
        } else {
          if ($(this.getTipElement()).hasClass(hideClass)) {
            return void this._leave(null, this);
          }
          this._enter(null, this);
        }
      }
    }, context.dispose = function () {
      clearTimeout(this._timeout);
      $.removeData(this.element, this.constructor.DATA_KEY);
      $(this.element).off(this.constructor.EVENT_KEY);
      $(this.element).closest(".modal").off("hide.bs.modal", this._hideModalHandler);
      if (this.tip) {
        $(this.tip).remove();
      }
      /** @type {null} */
      this._isEnabled = null;
      /** @type {null} */
      this._timeout = null;
      /** @type {null} */
      this._hoverState = null;
      /** @type {null} */
      this._activeTrigger = null;
      if (this._popper) {
        this._popper.destroy();
      }
      /** @type {null} */
      this._popper = null;
      /** @type {null} */
      this.element = null;
      /** @type {null} */
      this.config = null;
      /** @type {null} */
      this.tip = null;
    }, context.show = function () {
      var _this = this;
      if ("none" === $(this.element).css("display")) {
        throw new Error("Please use show on visible elements");
      }
      var event = $.Event(this.constructor.Event.SHOW);
      if (this.isWithContent() && this._isEnabled) {
        $(this.element).trigger(event);
        var value = Util.findShadowRoot(this.element);
        var parentLi = $.contains(null !== value ? value : this.element.ownerDocument.documentElement, this.element);
        if (event.isDefaultPrevented() || !parentLi) {
          return;
        }
        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute("id", tipId);
        this.element.setAttribute("aria-describedby", tipId);
        this.setContent();
        if (this.config.animation) {
          $(tip).addClass(animation);
        }
        var placement = "function" == typeof this.config.placement ? this.config.placement.call(this, tip, this.element) : this.config.placement;
        var attachment = this._getAttachment(placement);
        this.addAttachmentClass(attachment);
        var container = this._getContainer();
        $(tip).data(this.constructor.DATA_KEY, this);
        if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {
          $(tip).appendTo(container);
        }
        $(this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new obj(this.element, tip, this._getPopperConfig(attachment));
        $(tip).addClass(hideClass);
        if ("ontouchstart" in document.documentElement) {
          $(document.body).children().on("mouseover", null, $.noop);
        }
        /**
         * @return {undefined}
         */
        var complete = function () {
          if (_this.config.animation) {
            _this._fixTransition();
          }
          var prevHoverState = _this._hoverState;
          /** @type {null} */
          _this._hoverState = null;
          $(_this.element).trigger(_this.constructor.Event.SHOWN);
          if (prevHoverState === COMPONENT_LITERAL) {
            _this._leave(null, _this);
          }
        };
        if ($(this.tip).hasClass(animation)) {
          var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this.tip);
          $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          complete();
        }
      }
    }, context.hide = function (callback) {
      /**
       * @return {undefined}
       */
      function complete() {
        if (_this._hoverState !== undefined && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }
        _this._cleanTipClass();
        _this.element.removeAttribute("aria-describedby");
        $(_this.element).trigger(_this.constructor.Event.HIDDEN);
        if (null !== _this._popper) {
          _this._popper.destroy();
        }
        if (callback) {
          callback();
        }
      }
      var _this = this;
      var tip = this.getTipElement();
      var event = $.Event(this.constructor.Event.HIDE);
      if ($(this.element).trigger(event), !event.isDefaultPrevented()) {
        if ($(tip).removeClass(hideClass), "ontouchstart" in document.documentElement && $(document.body).children().off("mouseover", null, $.noop), this._activeTrigger[check] = false, this._activeTrigger[peek] = false, this._activeTrigger[read] = false, $(this.tip).hasClass(animation)) {
          var TRANSITION_DURATION = Util.getTransitionDurationFromElement(tip);
          $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          complete();
        }
        /** @type {string} */
        this._hoverState = "";
      }
    }, context.update = function () {
      if (null !== this._popper) {
        this._popper.scheduleUpdate();
      }
    }, context.isWithContent = function () {
      return Boolean(this.getTitle());
    }, context.addAttachmentClass = function (a) {
      $(this.getTipElement()).addClass(value + "-" + a);
    }, context.getTipElement = function () {
      return this.tip = this.tip || $(this.config.template)[0], this.tip;
    }, context.setContent = function () {
      var tip = this.getTipElement();
      this.setElementContent($(tip.querySelectorAll(option)), this.getTitle());
      $(tip).removeClass(animation + " " + hideClass);
    }, context.setElementContent = function ($element, content) {
      if ("object" != typeof content || !content.nodeType && !content.jquery) {
        if (this.config.html) {
          if (this.config.sanitize) {
            content = parse(content, this.config.whiteList, this.config.sanitizeFn);
          }
          $element.html(content);
        } else {
          $element.text(content);
        }
      } else {
        if (this.config.html) {
          if (!$(content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($(content).text());
        }
      }
    }, context.getTitle = function () {
      var title = this.element.getAttribute("data-original-title");
      return title = title || ("function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title);
    }, context._getPopperConfig = function (options) {
      var pageOptimizer = this;
      return extend({}, {
        placement: options,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: this_area
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function (data) {
          if (data.originalPlacement !== data.placement) {
            pageOptimizer._handlePopperPlacementChange(data);
          }
        },
        onUpdate: function (data) {
          return pageOptimizer._handlePopperPlacementChange(data);
        }
      }, {}, this.config.popperConfig);
    }, context._getOffset = function () {
      var e = this;
      var options = {};
      return "function" == typeof this.config.offset ? options.fn = function (params) {
        return params.offsets = extend({}, params.offsets, {}, e.config.offset(params.offsets, e.element) || {}), params;
      } : options.offset = this.config.offset, options;
    }, context._getContainer = function () {
      return false === this.config.container ? document.body : Util.isElement(this.config.container) ? $(this.config.container) : $(document).find(this.config.container);
    }, context._getAttachment = function (placement) {
      return KEYS[placement.toUpperCase()];
    }, context._setListeners = function () {
      var context = this;
      this.config.trigger.split(" ").forEach(function (trigger) {
        if ("click" === trigger) {
          $(context.element).on(context.constructor.Event.CLICK, context.config.selector, function (div) {
            return context.toggle(div);
          });
        } else {
          if (trigger !== hover) {
            var containerEvent = trigger === read ? context.constructor.Event.MOUSEENTER : context.constructor.Event.FOCUSIN;
            var $closingAreaRight = trigger === read ? context.constructor.Event.MOUSELEAVE : context.constructor.Event.FOCUSOUT;
            $(context.element).on(containerEvent, context.config.selector, function (state) {
              return context._enter(state);
            }).on($closingAreaRight, context.config.selector, function (node) {
              return context._leave(node);
            });
          }
        }
      });
      /**
       * @return {undefined}
       */
      this._hideModalHandler = function () {
        if (context.element) {
          context.hide();
        }
      };
      $(this.element).closest(".modal").on("hide.bs.modal", this._hideModalHandler);
      if (this.config.selector) {
        this.config = extend({}, this.config, {
          trigger: "manual",
          selector: ""
        });
      } else {
        this._fixTitle();
      }
    }, context._fixTitle = function () {
      /** @type {string} */
      var type = typeof this.element.getAttribute("data-original-title");
      if (!(!this.element.getAttribute("title") && "string" == type)) {
        this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
        this.element.setAttribute("title", "");
      }
    }, context._enter = function (event, context) {
      var dataKey = this.constructor.DATA_KEY;
      if (!(context = context || $(event.currentTarget).data(dataKey))) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }
      if (event) {
        /** @type {boolean} */
        context._activeTrigger["focusin" === event.type ? peek : read] = true;
      }
      if ($(context.getTipElement()).hasClass(hideClass) || context._hoverState === undefined) {
        /** @type {string} */
        context._hoverState = undefined;
      } else {
        clearTimeout(context._timeout);
        /** @type {string} */
        context._hoverState = undefined;
        if (context.config.delay && context.config.delay.show) {
          /** @type {number} */
          context._timeout = setTimeout(function () {
            if (context._hoverState === undefined) {
              context.show();
            }
          }, context.config.delay.show);
        } else {
          context.show();
        }
      }
    }, context._leave = function (event, context) {
      var dataKey = this.constructor.DATA_KEY;
      if (!(context = context || $(event.currentTarget).data(dataKey))) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }
      if (event) {
        /** @type {boolean} */
        context._activeTrigger["focusout" === event.type ? peek : read] = false;
      }
      if (!context._isWithActiveTrigger()) {
        clearTimeout(context._timeout);
        /** @type {string} */
        context._hoverState = COMPONENT_LITERAL;
        if (context.config.delay && context.config.delay.hide) {
          /** @type {number} */
          context._timeout = setTimeout(function () {
            if (context._hoverState === COMPONENT_LITERAL) {
              context.hide();
            }
          }, context.config.delay.hide);
        } else {
          context.hide();
        }
      }
    }, context._isWithActiveTrigger = function () {
      var trigger;
      for (trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }
      return false;
    }, context._getConfig = function (options) {
      var params = $(this.element).data();
      return Object.keys(params).forEach(function (j) {
        if (-1 !== _activeValues.indexOf(j)) {
          delete params[j];
        }
      }), "number" == typeof (options = extend({}, this.constructor.Default, {}, params, {}, "object" == typeof options && options ? options : {})).delay && (options.delay = {
        show: options.delay,
        hide: options.delay
      }), "number" == typeof options.title && (options.title = options.title.toString()), "number" == typeof options.content && (options.content = options.content.toString()), Util.typeCheckConfig(name, options, this.constructor.DefaultType), options.sanitize && (options.template = parse(options.template, options.whiteList, options.sanitizeFn)), options;
    }, context._getDelegateConfig = function () {
      var config = {};
      if (this.config) {
        var key;
        for (key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }
      return config;
    }, context._cleanTipClass = function () {
      var t = $(this.getTipElement());
      var value = t.attr("class").match(fileRExp);
      if (null !== value && value.length) {
        t.removeClass(value.join(""));
      }
    }, context._handlePopperPlacementChange = function (data) {
      var uid = data.instance;
      this.tip = uid.popper;
      this._cleanTipClass();
      this.addAttachmentClass(this._getAttachment(data.placement));
    }, context._fixTransition = function () {
      var tip = this.getTipElement();
      var name = this.config.animation;
      if (null === tip.getAttribute("x-placement")) {
        $(tip).removeClass(animation);
        /** @type {boolean} */
        this.config.animation = false;
        this.hide();
        this.show();
        this.config.animation = name;
      }
    }, Tooltip._jQueryInterface = function (config) {
      return this.each(function () {
        var fields = $(this).data(schema);
        var options = "object" == typeof config && config;
        if ((fields || !/dispose|hide/.test(config)) && (fields || (fields = new Tooltip(this, options), $(this).data(schema, fields)), "string" == typeof config)) {
          if ("undefined" == typeof fields[config]) {
            throw new TypeError('No method named "' + config + '"');
          }
          fields[config]();
        }
      });
    }, _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return defaults;
      }
    }, {
      key: "NAME",
      get: function () {
        return name;
      }
    }, {
      key: "DATA_KEY",
      get: function () {
        return schema;
      }
    }, {
      key: "Event",
      get: function () {
        return expectedDropEffect;
      }
    }, {
      key: "EVENT_KEY",
      get: function () {
        return ns;
      }
    }, {
      key: "DefaultType",
      get: function () {
        return options;
      }
    }]), Tooltip;
  }();
  $.fn[name] = Tooltip._jQueryInterface;
  $.fn[name].Constructor = Tooltip;
  /**
   * @return {?}
   */
  $.fn[name].noConflict = function () {
    return $.fn[name] = last_supr, Tooltip._jQueryInterface;
  };
  /** @type {string} */
  var dimension = "popover";
  /** @type {string} */
  var DATA_KEY = "bs.popover";
  /** @type {string} */
  var EVENT_KEY = "." + DATA_KEY;
  var size = $.fn[dimension];
  /** @type {string} */
  var b = "bs-popover";
  /** @type {!RegExp} */
  var rtokens = new RegExp("(^|\\s)" + b + "\\S+", "g");
  var lastSetVal = extend({}, Tooltip.Default, {
    placement: "right",
    trigger: "click",
    content: "",
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
  });
  var skillClone = extend({}, Tooltip.DefaultType, {
    content: "(string|element|function)"
  });
  /** @type {string} */
  var view = "fade";
  /** @type {string} */
  var page = "show";
  /** @type {string} */
  var configuredEmailDomains = ".popover-header";
  /** @type {string} */
  var currAvailLayers = ".popover-body";
  var attrObjValue = {
    HIDE: "hide" + EVENT_KEY,
    HIDDEN: "hidden" + EVENT_KEY,
    SHOW: "show" + EVENT_KEY,
    SHOWN: "shown" + EVENT_KEY,
    INSERTED: "inserted" + EVENT_KEY,
    CLICK: "click" + EVENT_KEY,
    FOCUSIN: "focusin" + EVENT_KEY,
    FOCUSOUT: "focusout" + EVENT_KEY,
    MOUSEENTER: "mouseenter" + EVENT_KEY,
    MOUSELEAVE: "mouseleave" + EVENT_KEY
  };
  var Popover = function (target) {
    /**
     * @return {?}
     */
    function Tab() {
      return target.apply(this, arguments) || this;
    }
    !function (Constructor, b) {
      /** @type {!Object} */
      Constructor.prototype = Object.create(b.prototype);
      /** @type {!Function} */
      (Constructor.prototype.constructor = Constructor).__proto__ = b;
    }(Tab, target);
    /** @type {!i.prototype} */
    var element = Tab.prototype;
    return element.isWithContent = function () {
      return this.getTitle() || this._getContent();
    }, element.addAttachmentClass = function (a) {
      $(this.getTipElement()).addClass(b + "-" + a);
    }, element.getTipElement = function () {
      return this.tip = this.tip || $(this.config.template)[0], this.tip;
    }, element.setContent = function () {
      var _ = $(this.getTipElement());
      this.setElementContent(_.find(configuredEmailDomains), this.getTitle());
      var e = this._getContent();
      if ("function" == typeof e) {
        e = e.call(this.element);
      }
      this.setElementContent(_.find(currAvailLayers), e);
      _.removeClass(view + " " + page);
    }, element._getContent = function () {
      return this.element.getAttribute("data-content") || this.config.content;
    }, element._cleanTipClass = function () {
      var t = $(this.getTipElement());
      var tokens = t.attr("class").match(rtokens);
      if (null !== tokens && 0 < tokens.length) {
        t.removeClass(tokens.join(""));
      }
    }, Tab._jQueryInterface = function (config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);
        var id = "object" == typeof config ? config : null;
        if ((data || !/dispose|hide/.test(config)) && (data || (data = new Tab(this, id), $(this).data(DATA_KEY, data)), "string" == typeof config)) {
          if ("undefined" == typeof data[config]) {
            throw new TypeError('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    }, _createClass(Tab, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return lastSetVal;
      }
    }, {
      key: "NAME",
      get: function () {
        return dimension;
      }
    }, {
      key: "DATA_KEY",
      get: function () {
        return DATA_KEY;
      }
    }, {
      key: "Event",
      get: function () {
        return attrObjValue;
      }
    }, {
      key: "EVENT_KEY",
      get: function () {
        return EVENT_KEY;
      }
    }, {
      key: "DefaultType",
      get: function () {
        return skillClone;
      }
    }]), Tab;
  }(Tooltip);
  $.fn[dimension] = Popover._jQueryInterface;
  $.fn[dimension].Constructor = Popover;
  /**
   * @return {?}
   */
  $.fn[dimension].noConflict = function () {
    return $.fn[dimension] = size, Popover._jQueryInterface;
  };
  /** @type {string} */
  var NAME = "scrollspy";
  /** @type {string} */
  var DATA_PREVIEW = "bs.scrollspy";
  /** @type {string} */
  var elementNamespace = "." + DATA_PREVIEW;
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var result = {
    offset: 10,
    method: "auto",
    target: ""
  };
  var params = {
    offset: "number",
    method: "string",
    target: "(string|element)"
  };
  var bpc = {
    ACTIVATE: "activate" + elementNamespace,
    SCROLL: "scroll" + elementNamespace,
    LOAD_DATA_API: "load" + elementNamespace + ".data-api"
  };
  /** @type {string} */
  var blockClassActive = "dropdown-item";
  /** @type {string} */
  var activeClass = "active";
  /** @type {string} */
  var referenceElementSelector = '[data-spy="scroll"]';
  /** @type {string} */
  var button = ".nav, .list-group";
  /** @type {string} */
  var IMG = ".nav-link";
  /** @type {string} */
  var itemSelector = ".nav-item";
  /** @type {string} */
  var itemClass = ".list-group-item";
  /** @type {string} */
  var editable = ".dropdown";
  /** @type {string} */
  var In = ".dropdown-item";
  /** @type {string} */
  var sectionOwnerID = ".dropdown-toggle";
  /** @type {string} */
  var off = "offset";
  /** @type {string} */
  var offset = "position";
  var Tab = function () {
    /**
     * @param {!Object} element
     * @param {?} config
     * @return {undefined}
     */
    function ScrollSpy(element, config) {
      var SpreeAPITaxonAdapter = this;
      /** @type {!Object} */
      this._element = element;
      this._scrollElement = "BODY" === element.tagName ? window : element;
      this._config = this._getConfig(config);
      /** @type {string} */
      this._selector = this._config.target + " " + IMG + "," + this._config.target + " " + itemClass + "," + this._config.target + " " + In;
      /** @type {!Array} */
      this._offsets = [];
      /** @type {!Array} */
      this._targets = [];
      /** @type {null} */
      this._activeTarget = null;
      /** @type {number} */
      this._scrollHeight = 0;
      $(this._scrollElement).on(bpc.SCROLL, function (innerTaxon) {
        return SpreeAPITaxonAdapter._process(innerTaxon);
      });
      this.refresh();
      this._process();
    }
    var self = ScrollSpy.prototype;
    return self.refresh = function () {
      var _this14 = this;
      /** @type {string} */
      var type = this._scrollElement === this._scrollElement.window ? off : offset;
      var key = "auto" === this._config.method ? type : this._config.method;
      var searchBarHeight = key === offset ? this._getScrollTop() : 0;
      /** @type {!Array} */
      this._offsets = [];
      /** @type {!Array} */
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      [].slice.call(document.querySelectorAll(this._selector)).map(function (element) {
        var e;
        var c = Util.getSelectorFromElement(element);
        if (c && (e = document.querySelector(c)), e) {
          /** @type {!ClientRect} */
          var _childCoords = e.getBoundingClientRect();
          if (_childCoords.width || _childCoords.height) {
            return [$(e)[key]().top + searchBarHeight, c];
          }
        }
        return null;
      }).filter(function (results) {
        return results;
      }).sort(function (subtractor, subtractee) {
        return subtractor[0] - subtractee[0];
      }).forEach(function (subSetsToFilter) {
        _this14._offsets.push(subSetsToFilter[0]);
        _this14._targets.push(subSetsToFilter[1]);
      });
    }, self.dispose = function () {
      $.removeData(this._element, DATA_PREVIEW);
      $(this._scrollElement).off(elementNamespace);
      /** @type {null} */
      this._element = null;
      /** @type {null} */
      this._scrollElement = null;
      /** @type {null} */
      this._config = null;
      /** @type {null} */
      this._selector = null;
      /** @type {null} */
      this._offsets = null;
      /** @type {null} */
      this._targets = null;
      /** @type {null} */
      this._activeTarget = null;
      /** @type {null} */
      this._scrollHeight = null;
    }, self._getConfig = function (options) {
      if ("string" != typeof (options = extend({}, result, {}, "object" == typeof options && options ? options : {})).target) {
        var id = $(options.target).attr("id");
        if (!id) {
          id = Util.getUID(NAME);
          $(options.target).attr("id", id);
        }
        /** @type {string} */
        options.target = "#" + id;
      }
      return Util.typeCheckConfig(NAME, options, params), options;
    }, self._getScrollTop = function () {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }, self._getScrollHeight = function () {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }, self._getOffsetHeight = function () {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }, self._process = function () {
      var scrollTop = this._getScrollTop() + this._config.offset;
      var scrollHeight = this._getScrollHeight();
      /** @type {number} */
      var firstRowTop = this._config.offset + scrollHeight - this._getOffsetHeight();
      if (this._scrollHeight !== scrollHeight && this.refresh(), firstRowTop <= scrollTop) {
        var target = this._targets[this._targets.length - 1];
        if (this._activeTarget !== target) {
          this._activate(target);
        }
      } else {
        if (this._activeTarget && scrollTop < this._offsets[0] && 0 < this._offsets[0]) {
          return this._activeTarget = null, void this._clear();
        }
        var i = this._offsets.length;
        for (; i--;) {
          if (this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && ("undefined" == typeof this._offsets[i + 1] || scrollTop < this._offsets[i + 1])) {
            this._activate(this._targets[i]);
          }
        }
      }
    }, self._activate = function (target) {
      /** @type {string} */
      this._activeTarget = target;
      this._clear();
      var drilldownLevelLabels = this._selector.split(",").map(function (dep) {
        return dep + '[data-target="' + target + '"],' + dep + '[href="' + target + '"]';
      });
      var $this = $([].slice.call(document.querySelectorAll(drilldownLevelLabels.join(","))));
      if ($this.hasClass(blockClassActive)) {
        $this.closest(editable).find(sectionOwnerID).addClass(activeClass);
        $this.addClass(activeClass);
      } else {
        $this.addClass(activeClass);
        $this.parents(button).prev(IMG + ", " + itemClass).addClass(activeClass);
        $this.parents(button).prev(itemSelector).children(IMG).addClass(activeClass);
      }
      $(this._scrollElement).trigger(bpc.ACTIVATE, {
        relatedTarget: target
      });
    }, self._clear = function () {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (divChatButton) {
        return divChatButton.classList.contains(activeClass);
      }).forEach(function (focusedObj) {
        return focusedObj.classList.remove(activeClass);
      });
    }, ScrollSpy._jQueryInterface = function (config) {
      return this.each(function () {
        var data = $(this).data(DATA_PREVIEW);
        if (data || (data = new ScrollSpy(this, "object" == typeof config && config), $(this).data(DATA_PREVIEW, data)), "string" == typeof config) {
          if ("undefined" == typeof data[config]) {
            throw new TypeError('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    }, _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "Default",
      get: function () {
        return result;
      }
    }]), ScrollSpy;
  }();
  $(window).on(bpc.LOAD_DATA_API, function () {
    /** @type {!Array<?>} */
    var scrollSpys = [].slice.call(document.querySelectorAll(referenceElementSelector));
    /** @type {number} */
    var i = scrollSpys.length;
    for (; i--;) {
      var n = $(scrollSpys[i]);
      Tab._jQueryInterface.call(n, n.data());
    }
  });
  $.fn[NAME] = Tab._jQueryInterface;
  $.fn[NAME].Constructor = Tab;
  /**
   * @return {?}
   */
  $.fn[NAME].noConflict = function () {
    return $.fn[NAME] = JQUERY_NO_CONFLICT, Tab._jQueryInterface;
  };
  /** @type {string} */
  var datakey = "bs.tab";
  /** @type {string} */
  var offsets = "." + datakey;
  var old = $.fn.tab;
  var args = {
    HIDE: "hide" + offsets,
    HIDDEN: "hidden" + offsets,
    SHOW: "show" + offsets,
    SHOWN: "shown" + offsets,
    CLICK_DATA_API: "click" + offsets + ".data-api"
  };
  /** @type {string} */
  var attrName = "dropdown-menu";
  /** @type {string} */
  var ACTIVE = "active";
  /** @type {string} */
  var clearnode = "disabled";
  /** @type {string} */
  var containerEl = "fade";
  /** @type {string} */
  var animationClass = "show";
  /** @type {string} */
  var EXPANDED_ITEM_SELECTOR = ".dropdown";
  /** @type {string} */
  var CLASS_FIELD = ".nav, .list-group";
  /** @type {string} */
  var a = ".active";
  /** @type {string} */
  var body = "> li > .active";
  /** @type {string} */
  var deferURL = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
  /** @type {string} */
  var el = ".dropdown-toggle";
  /** @type {string} */
  var groupPlansQuery = "> .dropdown-menu .active";
  var tab = function () {
    /**
     * @param {!Element} element
     * @return {undefined}
     */
    function Tab(element) {
      /** @type {!Element} */
      this._element = element;
    }
    var proto = Tab.prototype;
    return proto.show = function () {
      var _this15 = this;
      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ACTIVE) || $(this._element).hasClass(clearnode))) {
        var target;
        var previous;
        var root = $(this._element).closest(CLASS_FIELD)[0];
        var selector = Util.getSelectorFromElement(this._element);
        if (root) {
          /** @type {string} */
          var selector = "UL" === root.nodeName || "OL" === root.nodeName ? body : a;
          previous = (previous = $.makeArray($(root).find(selector)))[previous.length - 1];
        }
        var e = $.Event(args.HIDE, {
          relatedTarget: this._element
        });
        var event = $.Event(args.SHOW, {
          relatedTarget: previous
        });
        if (previous && $(previous).trigger(e), $(this._element).trigger(event), !event.isDefaultPrevented() && !e.isDefaultPrevented()) {
          if (selector) {
            /** @type {(Element|null)} */
            target = document.querySelector(selector);
          }
          this._activate(this._element, root);
          /**
           * @return {undefined}
           */
          var complete = function () {
            var aerisTopic = $.Event(args.HIDDEN, {
              relatedTarget: _this15._element
            });
            var viewModelPropertyUpdates = $.Event(args.SHOWN, {
              relatedTarget: previous
            });
            $(previous).trigger(aerisTopic);
            $(_this15._element).trigger(viewModelPropertyUpdates);
          };
          if (target) {
            this._activate(target, target.parentNode, complete);
          } else {
            complete();
          }
        }
      }
    }, proto.dispose = function () {
      $.removeData(this._element, datakey);
      /** @type {null} */
      this._element = null;
    }, proto._activate = function (element, value, event) {
      /**
       * @return {?}
       */
      function complete() {
        return _this._transitionComplete(element, context, event);
      }
      var _this = this;
      var context = (!value || "UL" !== value.nodeName && "OL" !== value.nodeName ? $(value).children(a) : $(value).find(body))[0];
      var xp = event && context && $(context).hasClass(containerEl);
      if (context && xp) {
        var time = Util.getTransitionDurationFromElement(context);
        $(context).removeClass(animationClass).one(Util.TRANSITION_END, complete).emulateTransitionEnd(time);
      } else {
        complete();
      }
    }, proto._transitionComplete = function (element, elem, callback) {
      if (elem) {
        $(elem).removeClass(ACTIVE);
        var customPlayerControlsButton = $(elem.parentNode).find(groupPlansQuery)[0];
        if (customPlayerControlsButton) {
          $(customPlayerControlsButton).removeClass(ACTIVE);
        }
        if ("tab" === elem.getAttribute("role")) {
          elem.setAttribute("aria-selected", false);
        }
      }
      if ($(element).addClass(ACTIVE), "tab" === element.getAttribute("role") && element.setAttribute("aria-selected", true), Util.reflow(element), element.classList.contains(containerEl) && element.classList.add(animationClass), element.parentNode && $(element.parentNode).hasClass(attrName)) {
        var aside = $(element).closest(EXPANDED_ITEM_SELECTOR)[0];
        if (aside) {
          /** @type {!Array<?>} */
          var IFBox = [].slice.call(aside.querySelectorAll(el));
          $(IFBox).addClass(ACTIVE);
        }
        element.setAttribute("aria-expanded", true);
      }
      if (callback) {
        callback();
      }
    }, Tab._jQueryInterface = function (config) {
      return this.each(function () {
        var $target = $(this);
        var data = $target.data(datakey);
        if (data || (data = new Tab(this), $target.data(datakey, data)), "string" == typeof config) {
          if ("undefined" == typeof data[config]) {
            throw new TypeError('No method named "' + config + '"');
          }
          data[config]();
        }
      });
    }, _createClass(Tab, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }]), Tab;
  }();
  $(document).on(args.CLICK_DATA_API, deferURL, function (event) {
    event.preventDefault();
    tab._jQueryInterface.call($(this), "show");
  });
  $.fn.tab = tab._jQueryInterface;
  $.fn.tab.Constructor = tab;
  /**
   * @return {?}
   */
  $.fn.tab.noConflict = function () {
    return $.fn.tab = old, tab._jQueryInterface;
  };
  /** @type {string} */
  var JQUERY_NAME = "toast";
  /** @type {string} */
  var lines = "bs.toast";
  /** @type {string} */
  var display = "." + lines;
  var Gn = $.fn[JQUERY_NAME];
  var EVENTS = {
    CLICK_DISMISS: "click.dismiss" + display,
    HIDE: "hide" + display,
    HIDDEN: "hidden" + display,
    SHOW: "show" + display,
    SHOWN: "shown" + display
  };
  /** @type {string} */
  var f = "fade";
  /** @type {string} */
  var classname = "hide";
  /** @type {string} */
  var prefix = "show";
  /** @type {string} */
  var PRIMARY_COLOR_CLASSNAME = "showing";
  var config = {
    animation: "boolean",
    autohide: "boolean",
    delay: "number"
  };
  var settings = {
    animation: true,
    autohide: true,
    delay: 500
  };
  /** @type {string} */
  var manualZoom = '[data-dismiss="toast"]';
  var Datepicker = function () {
    /**
     * @param {!Element} el
     * @param {?} config
     * @return {undefined}
     */
    function Tooltip(el, config) {
      /** @type {!Element} */
      this._element = el;
      this._config = this._getConfig(config);
      /** @type {null} */
      this._timeout = null;
      this._setListeners();
    }
    var proto = Tooltip.prototype;
    return proto.show = function () {
      var self = this;
      var event = $.Event(EVENTS.SHOW);
      if ($(this._element).trigger(event), !event.isDefaultPrevented()) {
        if (this._config.animation) {
          this._element.classList.add(f);
        }
        /**
         * @return {undefined}
         */
        var complete = function () {
          self._element.classList.remove(PRIMARY_COLOR_CLASSNAME);
          self._element.classList.add(prefix);
          $(self._element).trigger(EVENTS.SHOWN);
          if (self._config.autohide) {
            /** @type {number} */
            self._timeout = setTimeout(function () {
              self.hide();
            }, self._config.delay);
          }
        };
        if (this._element.classList.remove(classname), Util.reflow(this._element), this._element.classList.add(PRIMARY_COLOR_CLASSNAME), this._config.animation) {
          var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._element);
          $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          complete();
        }
      }
    }, proto.hide = function () {
      if (this._element.classList.contains(prefix)) {
        var event = $.Event(EVENTS.HIDE);
        $(this._element).trigger(event);
        if (!event.isDefaultPrevented()) {
          this._close();
        }
      }
    }, proto.dispose = function () {
      clearTimeout(this._timeout);
      /** @type {null} */
      this._timeout = null;
      if (this._element.classList.contains(prefix)) {
        this._element.classList.remove(prefix);
      }
      $(this._element).off(EVENTS.CLICK_DISMISS);
      $.removeData(this._element, lines);
      /** @type {null} */
      this._element = null;
      /** @type {null} */
      this._config = null;
    }, proto._getConfig = function (config) {
      return config = extend({}, settings, {}, $(this._element).data(), {}, "object" == typeof config && config ? config : {}), Util.typeCheckConfig(JQUERY_NAME, config, this.constructor.DefaultType), config;
    }, proto._setListeners = function () {
      var $trashTreeContextMenu = this;
      $(this._element).on(EVENTS.CLICK_DISMISS, manualZoom, function () {
        return $trashTreeContextMenu.hide();
      });
    }, proto._close = function () {
      /**
       * @return {undefined}
       */
      function complete() {
        _this7._element.classList.add(classname);
        $(_this7._element).trigger(EVENTS.HIDDEN);
      }
      var _this7 = this;
      if (this._element.classList.remove(prefix), this._config.animation) {
        var TRANSITION_DURATION = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      } else {
        complete();
      }
    }, Tooltip._jQueryInterface = function (fn) {
      return this.each(function () {
        var svg = $(this);
        var r = svg.data(lines);
        if (r || (r = new Tooltip(this, "object" == typeof fn && fn), svg.data(lines, r)), "string" == typeof fn) {
          if ("undefined" == typeof r[fn]) {
            throw new TypeError('No method named "' + fn + '"');
          }
          r[fn](this);
        }
      });
    }, _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function () {
        return "4.4.1";
      }
    }, {
      key: "DefaultType",
      get: function () {
        return config;
      }
    }, {
      key: "Default",
      get: function () {
        return settings;
      }
    }]), Tooltip;
  }();
  $.fn[JQUERY_NAME] = Datepicker._jQueryInterface;
  $.fn[JQUERY_NAME].Constructor = Datepicker;
  /**
   * @return {?}
   */
  $.fn[JQUERY_NAME].noConflict = function () {
    return $.fn[JQUERY_NAME] = Gn, Datepicker._jQueryInterface;
  };
  exports.Alert = Alert;
  exports.Button = Button;
  exports.Carousel = Carousel;
  exports.Collapse = Collapse;
  exports.Dropdown = Dropdown;
  exports.Modal = Modal;
  exports.Popover = Popover;
  exports.Scrollspy = Tab;
  exports.Tab = tab;
  exports.Toast = Datepicker;
  exports.Tooltip = Tooltip;
  exports.Util = Util;
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
});
