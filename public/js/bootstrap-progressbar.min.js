/**
 * @license
 bootstrap-progressbar v0.8.5 | Copyright (c) 2012-2015 Stephan Gro√ü | MIT license | http://www.minddust.com */
'use strict';
!function ($) {
    /**
     * @param {?} element
     * @param {?} options
     * @return {undefined}
     */
    var Progressbar = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Progressbar.defaults, options);
    };
    Progressbar.defaults = {
        transition_delay: 300,
        refresh_speed: 50,
        display_text: "none",
        use_percentage: true,
        percent_format: function (percent) {
            return percent + "%";
        },
        amount_format: function (amount_part, amount_max) {
            return amount_part + " / " + amount_max;
        },
        update: $.noop,
        done: $.noop,
        fail: $.noop
    };
    /**
     * @return {?}
     */
    Progressbar.prototype.transition = function () {
        var $this = this.$element;
        var $parent = $this.parent();
        var $back_text = this.$back_text;
        var $front_text = this.$front_text;
        var options = this.options;
        /** @type {number} */
        var data_transitiongoal = parseInt($this.attr("data-transitiongoal"));
        /** @type {number} */
        var aria_valuemin = parseInt($this.attr("aria-valuemin")) || 0;
        /** @type {number} */
        var aria_valuemax = parseInt($this.attr("aria-valuemax")) || 100;
        var verticalStyle = $parent.hasClass("vertical");
        var update = options.update && "function" == typeof options.update ? options.update : Progressbar.defaults.update;
        var bindRemoveInput = options.done && "function" == typeof options.done ? options.done : Progressbar.defaults.done;
        var getOppositeDir = options.fail && "function" == typeof options.fail ? options.fail : Progressbar.defaults.fail;
        if (isNaN(data_transitiongoal)) {
            return void getOppositeDir("data-transitiongoal not set");
        }
        /** @type {number} */
        var percentage = Math.round(100 * (data_transitiongoal - aria_valuemin) / (aria_valuemax - aria_valuemin));
        if ("center" === options.display_text && !$back_text && !$front_text) {
            this.$back_text = $back_text = $("<span>").addClass("progressbar-back-text").prependTo($parent);
            this.$front_text = $front_text = $("<span>").addClass("progressbar-front-text").prependTo($this);
            var size;
            if (verticalStyle) {
                size = $parent.css("height");
                $back_text.css({
                    height: size,
                    "line-height": size
                });
                $front_text.css({
                    height: size,
                    "line-height": size
                });
                $(window).resize(function () {
                    size = $parent.css("height");
                    $back_text.css({
                        height: size,
                        "line-height": size
                    });
                    $front_text.css({
                        height: size,
                        "line-height": size
                    });
                });
            } else {
                size = $parent.css("width");
                $front_text.css({
                    width: size
                });
                $(window).resize(function () {
                    size = $parent.css("width");
                    $front_text.css({
                        width: size
                    });
                });
            }
        }
        setTimeout(function () {
            var current_percentage;
            var current_value;
            var this_size;
            var parent_size;
            var text;
            if (verticalStyle) {
                $this.css("height", percentage + "%");
            } else {
                $this.css("width", percentage + "%");
            }
            /** @type {number} */
            var chat_retry = setInterval(function () {
                if (verticalStyle) {
                    this_size = $this.height();
                    parent_size = $parent.height();
                } else {
                    this_size = $this.width();
                    parent_size = $parent.width();
                }
                /** @type {number} */
                current_percentage = Math.round(100 * this_size / parent_size);
                /** @type {number} */
                current_value = Math.round(aria_valuemin + this_size / parent_size * (aria_valuemax - aria_valuemin));
                if (current_percentage >= percentage) {
                    /** @type {number} */
                    current_percentage = percentage;
                    /** @type {number} */
                    current_value = data_transitiongoal;
                    bindRemoveInput($this);
                    clearInterval(chat_retry);
                }
                if ("none" !== options.display_text) {
                    text = options.use_percentage ? options.percent_format(current_percentage) : options.amount_format(current_value, aria_valuemax, aria_valuemin);
                    if ("fill" === options.display_text) {
                        $this.text(text);
                    } else {
                        if ("center" === options.display_text) {
                            $back_text.text(text);
                            $front_text.text(text);
                        }
                    }
                }
                $this.attr("aria-valuenow", current_value);
                update(current_percentage, $this);
            }, options.refresh_speed);
        }, options.transition_delay);
    };
    var old = $.fn.progressbar;
    /**
     * @param {!Function} key
     * @return {?}
     */
    $.fn.progressbar = function (key) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.progressbar");
            var options = "object" == typeof key && key;
            if (!data) {
                $this.data("bs.progressbar", data = new Progressbar(this, options));
            }
            data.transition();
        });
    };
    /** @type {function(?, ?): undefined} */
    $.fn.progressbar.Constructor = Progressbar;
    /**
     * @return {?}
     */
    $.fn.progressbar.noConflict = function () {
        return $.fn.progressbar = old, this;
    };
}(window.jQuery);
