'use strict';
var myDate;
var fileOut;
var file;
var headers;
/** @type {number} */
var DEBUG = 0;
/**
 * @return {undefined}
 */
function showModal() {
    $("#modal").modal("show");
    $(".modal-backdrop.in").hide();
}
/**
 * @param {string} id
 * @return {undefined}
 */
function hideBlock(id) {
    setTimeout(function () {
        $("#container" + id).html("");
        $(".cont" + id + "Block").hide();
        remove(".cont" + id + "Block");
    }, 10);
}
/**
 * @param {string} type
 * @return {undefined}
 */
function hideNotes(type) {
    setTimeout(function () {
        $("#container" + type + "Notes").html("");
        $("#container" + type + "Notes").fadeOut("fast");
    }, 10);
}
/**
 * @param {string} name
 * @return {undefined}
 */
function showBlock(name) {
    setTimeout(function () {
        $(".cont" + name + "Block").show();
        add(".cont" + name + "Block");
    }, 10);
}
/**
 * @param {string} id
 * @param {string} x
 * @return {undefined}
 */
function showNotes(id, x) {
    setTimeout(function () {
        $("#container" + id + "Notes").show();
        $("#container" + id + "Notes").html(x);
    }, 10);
}
/**
 * @param {string} $el
 * @return {undefined}
 */
function show($el) {
    setTimeout(function () {
        $($el).addClass("show");
    }, 0);
}
/**
 * @param {string} $el
 * @return {undefined}
 */
function hide($el) {
    setTimeout(function () {
        $($el).addClass("hide");
    }, 0);
}
/**
 * @param {string} e
 * @return {undefined}
 */
function add(e) {
    setTimeout(function () {
        $(e).addClass("add");
    }, 10);
}
/**
 * @param {string} e
 * @return {undefined}
 */
function remove(e) {
    setTimeout(function () {
        $(e).addClass("remove");
    }, 0);
}
/**
 * @param {string} type
 * @return {undefined}
 */
function $import(type) {
    /** @type {!Element} */
    var node = document.createElement("script");
    node.setAttribute("src", type);
    node.setAttribute("type", "text/javascript");
    document.getElementsByTagName("head")[0].appendChild(node);
}
/**
 * @param {string} canCreateDiscussions
 * @return {undefined}
 */
function $importNoCache(canCreateDiscussions) {
    $import(canCreateDiscussions + ("?" + (new Date).getTime().toString()));
}
/**
 * @return {undefined}
 */
function homePage() {
    $("#fileinput").show();
    $(".homeContBlock").show();
    /** @type {number} */
    var zeroCharCode = 0;
    for (; zeroCharCode < 4; zeroCharCode++) {
        hideBlock(String.fromCharCode(65 + zeroCharCode));
    }
    hideBlock("M");
    $("#btnDBGo").removeClass("d-flex").addClass("d-none");
    $("#btnSave").removeClass("d-flex").addClass("d-none");
    $(".reportBlock").hide();
    $("#spinner").hide();
    $("#spinner").removeClass("d-flex").addClass("d-none");
    $("#btnReset").show();
}
/**
 * @return {?}
 */
function defaultPage() {
    $("#fileErr").html("");
    $("#homeContBlock").html("");
    $("#contABlock").html("");
    $("#contBBlock").html("");
    $("#contCBlock").html("");
    $(".contDash").hide();
    /** @type {number} */
    var zeroCharCode = 0;
    for (; zeroCharCode < 4; zeroCharCode++) {
        hideBlock(String.fromCharCode(65 + zeroCharCode));
    }
    return hideBlock("M"), $("#btnDBGo").removeClass("d-flex").addClass("d-none"), $("#btnSave").removeClass("d-flex").addClass("d-none"), $("#spinner").removeClass("d-flex").addClass("d-none"), hide("#nav-container, #btnSAR, #btnPage, #btnCPUs, #btnCPU, #btnDevices, #btnInterfaceTraffics, #btnInterfaceErrors, #btnProcesses, #btnSwap, #btnPaging, #btnIO , #btnMem, #btnLoad, #btnNFS, #btnSockets, #btnReport, #btnContact, #btnFile, #btnTTY, #btnMemAlloc, #btnSysCalls, .reportBlock"), false;
}
/**
 * @return {undefined}
 */
function chartPage() {
    if ($("#fileinput").hide(), $("#btnSave").hide(), $(".homeContBlock").hide(), $(".container-notes").hide(), show("#btnDBGo"), $("#btnDBGo").removeClass("d-none").addClass("d-flex"), file) {
        var i;
        if (1 == DEBUG) {
            showBlock("M");
        }
        /** @type {number} */
        var zeroCharCode = 0;
        for (; zeroCharCode < 4; zeroCharCode++) {
            showBlock(i = String.fromCharCode(65 + zeroCharCode));
            $("#container" + i + "Title").html("");
            $("#container" + i + "Notes").html("");
        }
    } else {
        showBlock("M");
        $("#containerM").html("No data to display. Please upload a SAR file in <a href=# onclick=\"$('#btnSAR').click()\">Dashboard</a> Page.");
    }
}
/**
 * @param {number} loaded
 * @return {undefined}
 */
function updateProgress(loaded) {
    $("#spinnerVal").html(loaded + "%");
}
/**
 * @param {number} canCreateDiscussions
 * @return {?}
 */
function percentageToDegrees(canCreateDiscussions) {
    return canCreateDiscussions / 100 * 360;
}
/**
 * @return {undefined}
 */
function progressBarReset() {
    $("#spinner").removeClass("d-block").addClass("d-none");
    hide("#spinner");
    updateProgress(0);
}
/**
 * @param {!Event} event
 * @return {undefined}
 */
function errorHandler(event) {
    if (event.target.error.code == event.target.error.NOT_READABLE_ERR) {
        /** @type {string} */
        document.getElementById("fileErr").innerHTML = "Error reading file...";
    }
}
/**
 * @return {?}
 */
function getOS() {
    return fileOut.split(/\r\n|\r|\n/g)[0] ? fileOut.split(/\r\n|\r|\n/g)[0].split(",")[0].toUpperCase() : fileOut.split(/\r\n|\r|\n/g)[1].split(",")[0].toUpperCase();
}
/**
 * @return {?}
 */
function getHostname() {
    var componentsStr;
    switch (componentsStr = fileOut.split(/\r\n|\r|\n/g)[0] ? fileOut.split(/\r\n|\r|\n/g)[0] : fileOut.split(/\r\n|\r|\n/g)[1], getOS()) {
        case "LINUX":
            return componentsStr.split(",")[2].replace(/\(/g, "").replace(/\)/g, "");
        case "AIX":
        case "SUNOS":
            return componentsStr.split(",")[1].replace(/\(/g, "").replace(/\)/g, "");
    }
}
/**
 * @return {?}
 */
function getKernel() {
    var b;
    var mockB;
    var a;
    /** @type {string} */
    var name = "";
    switch (b = /\r\n|\r|\n/g, a = (mockB = fileOut.split(b))[0] || mockB[1], getOS()) {
        case "LINUX":
            name = a.split(/,/g)[1];
            break;
        case "AIX":
            name = a.split(/,/g)[4];
            break;
        case "SUNOS":
            name = a.split(/,/g)[3];
            break;
        default:
            /** @type {string} */
            name = "Unknown";
    }
    return name;
}
/**
 * @return {undefined}
 */
function getServerInfo() {
    var b;
    var mockB;
    var a;
    var sniffedDoctype;
    var hostname;
    var s;
    switch (b = /\r\n|\r|\n/g, a = (mockB = fileOut.split(b))[0] || mockB[1], sniffedDoctype = getOS(), hostname = getHostname(), s = getKernel(), sniffedDoctype.toUpperCase()) {
        case "LINUX":
        case "AIX":
            $(".homeContainer").html("Hostname: " + hostname + "<br>OS: " + sniffedDoctype + "<br>Kernel: " + s + "<br>");
            break;
        case "SUNOS":
            $(".homeContainer").html("Hostname: " + hostname + "<br>OS: " + sniffedDoctype + "<br>OS Version: " + a.split(",")[2] + "<br>Kernel: " + s + "<br>CPU Type: " + a.split(",")[4]);
    }
}
/**
 * @param {string} obj
 * @return {?}
 */
function grepHeaders(obj) {
    /** @type {!Array} */
    var format = [...headers];
    /** @type {number} */
    var formatPointer = 0;
    for (; formatPointer < format.length; formatPointer++) {
        if (format[formatPointer].match(obj)) {
            return format[formatPointer];
        }
    }
    return -1;
}
/**
 * @param {number} size
 * @param {!Function} selector
 * @return {?}
 */
function bytes(size, selector) {
    if (0 === size) {
        return "";
    }
    /** @type {number} */
    var number = Math.floor(Math.log(bytes) / Math.log(1024));
    /** @type {string} */
    var matcher = (size / Math.pow(1024, Math.floor(number))).toFixed(2);
    return number = number < 0 ? -number : number, selector && (matcher = matcher + (" " + ["bytes", "KB", "MB", "GB", "TB", "PB"][number])), matcher;
}
/**
 * @param {?} value
 * @return {?}
 */
function prettyTime(value) {
    return formatDate(new Date(value));
}
/**
 * @param {!Date} oDate
 * @return {?}
 */
function formatDate(oDate) {
    var d1 = oDate.getMonth() + 1;
    var end = oDate.getDate();
    var hours = oDate.getHours();
    var tmp = oDate.getMinutes();
    d1 = d1 < 10 ? "0" + d1 : d1;
    end = end < 10 ? "0" + end : end;
    /** @type {string} */
    var ampm = hours >= 12 ? "pm" : "am";
    /** @type {string} */
    var label = (hours = (hours = hours % 12) || 12) + ":" + (tmp = tmp < 10 ? "0" + tmp : tmp) + " " + ampm;
    return oDate.getFullYear().toString() + d1.toString() + end.toString() + "<br>" + label.toString();
}
/**
 * @param {!Event} loaded
 * @return {undefined}
 */
function loaded(loaded) {
    var lines;
    var metricComment;
    var matches;
    var _;
    var y;
    var src = loaded.target.result;
    /** @type {string} */
    var pix_color = "";
    if (1 === DEBUG) {
        console.log("Started loaded function");
    }
    show("#spinner");
    updateProgress(25);
    lines = src.replace(/^.*System configuration.*$/gm, "").replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    metricComment = ["%usr", "device", "bread/s", "swpin/s", "iget/s", "rawch/s", "proc-sz", "msg/s", "atch/s", "pgout/s", "freemem", "sml_mem", "CPU", "proc/s", "pswpin/s", "pgpgin/s", "tps", "frmpg/s", "kbmemfree", "kbswpfree", "kbhugfree", "dentunusd", "runq-sz", "DEV", "IFACE", "call/s", "scall/s", "totsck", "TTY", "INTR", "slots"];
    /** @type {!Array} */
    headers = [];
    if (1 === DEBUG) {
        console.log("Started parse for loop");
    }
    if (1 === DEBUG) {
        console.log("25%");
    }
    /** @type {number} */
    var i = 0;
    for (; i < lines.length; i++) {
        if (matches = lines[i].split(/\s+/), i == Math.ceil(.25 * lines.length) && ($("#spinnerVal").html("30%"), 1 === DEBUG && console.log("30%")), i == Math.ceil(.5 * lines.length) && ($("#spinnerVal").html("35%"), 1 === DEBUG && console.log("35%")), i == Math.ceil(.75 * lines.length) && ($("#spinnerVal").html("40%"), 1 === DEBUG && console.log("40%")), "Linux" === matches[0] ? (_ = matches[3], y = "") : "SunOS" !== matches[0] && "AIX" !== matches[0] || (_ = matches[5], y = ""), "AM" === matches[1] ||
            "PM" === matches[1]) {
            if (metricComment.indexOf(matches[2]) > -1) {
                /** @type {string} */
                y = matches[2] + "-" + matches[3] + ",";
                var selector = matches.slice(2, matches.length).join(",");
                if (-1 === headers.indexOf(selector)) {
                    headers.push(selector);
                }
                continue;
            }
        } else {
            if (metricComment.indexOf(matches[1]) > -1) {
                /** @type {string} */
                y = matches[1] + "-" + matches[2] + ",";
                var selector = matches.slice(1, matches.length).join(",");
                if (-1 === headers.indexOf(selector)) {
                    headers.push(selector);
                }
                continue;
            }
        }
        if (lines[i] && (lines[i].startsWith("Linux") || lines[i].startsWith("AIX") || lines[i].startsWith("SunOS"))) {
            /** @type {string} */
            pix_color = pix_color + (lines[i].replace(/\s+AM/g, ":AM").replace(/\s+PM/g, ":PM").replace(/\s+/g, ",") + "\n");
        } else {
            if (lines[i] && !lines[i].startsWith("Average")) {
                /** @type {string} */
                pix_color = pix_color + (y + _ + "|" + lines[i].replace(/\s+AM/g, ":AM").replace(/\s+PM/g, ":PM").replace(/\s+/g, ",") + "\n");
            }
        }
    }
    switch (1 === DEBUG && $(".contMBlock").html("<p style='font-family:Metrophobic;font-size:12px'>" + headers.join("<br />") + "</p>"), fileOut = pix_color, updateProgress(45), getServerInfo(), $("#pageTitle").html(), $("#containerA").html(""), $("#containerB").html(""), $("#containerC").html(""), updateProgress(50), getOS()) {
        case "LINUX":
            $("#peakBlock").addClass("add");
            $("#btnCPU, #btnFile, #btnTTY, #btnMemAlloc, #btnSysCalls").hide("fast");
            show("#nav-container, #btnSAR, #btnCPUs, #btnMem, #btnDevices, #btnProcesses, #btnSwap, #btnPaging, #btnPage, #btnIO, #btnLoad, #btnInterfaceTraffics, #btnInterfaceErrors, #btnNFS, #btnSockets, #btnReport, #btnContact");
            updateProgress(60);
            getCPU2("all\t", 2, "no", "#peakCPU");
            getGenericData("runq-sz-plist-sz", 1, "no", "#peakLoad");
            getGenericData("kbmemfree-kbmemused", 3, "no", "#peakMemory");
            getGenericData("kbswpfree-kbswpused", 3, "no", "#peakIO");
            updateProgress(70);
            getDevices("DEV-tps", "no", null);
            getInterfaceTraffic("IFACE-rxpck/s", "no", null);
            getInterfaceErrors("IFACE-rxerr/s", "no", null);
            printPieChart("peakCPUChart", parseInt($("#peakCPU").html()), "blue");
            printPieChart("peakLoadChart", parseInt($("#peakLoad").html()), "green");
            printPieChart("peakMemoryChart", parseInt($("#peakMemory").html()), "yellow");
            updateProgress(80);
            break;
        case "AIX":
            $("#btnCPUs, #btnMemFree, #btnMemAlloc, #btnSwapUsg, #btnSwap, #btnPage, #btnInterfaceTraffics, #btnInterfaceErrors, #btnNFS, #btnSockets").hide("fast");
            show("#nav-container, #btnSAR, #btnCPU, #btnMem, #btnDevices, #btnProcesses, #btnPaging, #btnIO, #btnLoad, #btnSysCalls, #btnFile, #btnTTY, #btnReport, #btnContact");
            break;
        case "SUNOS":
            $("#peakBlock").addClass("add");
            $("#btnCPUs, #btnMemFree, #btnSwapUsg, #btnPage, #btnInterfaceTraffics, #btnInterfaceErrors, #btnNFS, #btnSockets").fadeOut("fast");
            show("#nav-container, #btnSAR, #btnCPU, #btnMem, #btnMemAlloc, #btnDevices, #btnProcesses, #btnSwap, #btnPaging, #btnIO, #btnLoad, #btnSysCalls, #btnFile, #btnTTY, #btnReport, #btnContact");
            $("#peakCPULabel").html("Peak CPU");
            $("#peakLoadLabel").html("Peak Runq");
            $("#peakMemoryLabel").html("Top FreeMem");
            getGenericData("runq-sz-%runocc", 1, "no", "#peakLoad");
            getGenericData("freemem-freeswap", 1, "no", "#peakMemory");
            getGenericData("%usr-%sys", 1, "no", "#peakCPU");
            printPieChart("peakCPUChart", parseInt($("#peakCPU").html()), "blue");
            printPieChart("peakLoadChart", parseInt($("#peakLoad").html()), "green");
            printPieChart("peakMemoryChart", parseInt($("#peakMemory").html()), "yellow");
    }
    $("#btnReset").click(function () {
        location.reload(true);
    });
    $("#btnDBGo").click(function () {
        $("#btnSAR").click();
    });
    $("#btnCPUArrow").click(function () {
        $("#btnCPUs").click();
        $("#nav ul#ulCPU>li:last-child>a").click();
    });
    $("#btnLoadArrow").click(function () {
        $("#btnLoad").click();
    });
    $("#btnMemoryArrow").click(function () {
        $("#btnMem").click();
        $("#btnMemUsg").click();
    });
    $("#btnIOArrow").click(function () {
        $("#btnIO").click();
    });
    var min = $("#containerA").width();
    /** @type {number} */
    var max = 0;
    $("#sidebarCollapse").bind("click", function () {
        if (0 == max) {
            max = $("#containerA").width();
        }
        var chart = $("#containerA").highcharts();
        var H = $("#containerB").highcharts();
        var obj = $("#containerC").highcharts();
        var res = $("#containerD").highcharts();
        min = (min = $("#containerA").width()) <= max ? min + 150 : max;
        if ($("#containerA").is(":visible")) {
            chart.update({
                chart: {
                    width: min
                }
            });
        }
        if ($("#containerB").is(":visible")) {
            H.update({
                chart: {
                    width: min
                }
            });
        }
        if ($("#containerC").is(":visible")) {
            obj.update({
                chart: {
                    width: min
                }
            });
        }
        if ($("#containerD").is(":visible")) {
            res.update({
                chart: {
                    width: min
                }
            });
        }
        if ($("#containerA").is(":visible")) {
            chart.redraw();
        }
        if ($("#containerB").is(":visible")) {
            H.redraw();
        }
        if ($("#containerC").is(":visible")) {
            obj.redraw();
        }
        if ($("#containerD").is(":visible")) {
            res.redraw();
        }
        max = $("#containerA").width() + 10;
    });
    updateProgress(99);
    $("#sidebar").removeClass("active");
    $(".contDash").show();
    updateProgress(100);
    setTimeout(function () {
        progressBarReset();
    }, 1E3);
    $("#sidebar").show("fast");
    $("#sidebarCollapse").show("fast");
}
/**
 * @param {!Object} fileObject
 * @return {?}
 */
function getAsText(fileObject) {
    var reader;
    try {
        /** @type {!FileReader} */
        reader = new FileReader;
    } catch (e) {
        return void (document.getElementById("fileErr").innerHTML = "Error: seems File API is not supported on your browser");
    }
    reader.readAsText(fileObject, "UTF-8");
    /** @type {function(!Event): undefined} */
    reader.onload = loaded;
    /** @type {function(!Event): undefined} */
    reader.onerror = errorHandler;
    $("#fileErr").html("");
    $("#pageTitle").html("");
    $("#containerA").html("");
    $("#containerB").html("");
    $("#containerC").html("");
    $("#fileProgressBar").show();
    if (1 === DEBUG) {
        console.log("Start spinner from getAsText");
    }
    show("#spinner");
    updateProgress(15);
}
/**
 * @param {string} title
 * @return {undefined}
 */
function displayTitle(title) {
    chartPage();
    var val = getHostname();
    $("#pageTitle").html(title + " for " + val);
    $("#pageName").html(val);
    $("#pageShortName").html(title);
}
/**
 * @param {string} clusterShardData
 * @return {?}
 */
function timeString2Float(clusterShardData) {
    var arrCorner = clusterShardData.split(/[.:]/);
    return parseInt(arrCorner[0], 10) + (arrCorner[1] ? parseInt(arrCorner[1], 10) : 0) / 60;
}
/**
 * @param {number} escapeTime
 * @return {?}
 */
function float2timeString(escapeTime) {
    /** @type {number} */
    var remainNum = escapeTime % 60;
    return Math.floor(escapeTime / 60) + ":" + remainNum;
}
/**
 * @param {?} n
 * @return {?}
 */
function minTommss(n) {
    /** @type {string} */
    var str = n < 0 ? "-" : "";
    /** @type {number} */
    var from = Math.floor(Math.abs(n));
    /** @type {number} */
    var aByte = Math.floor(60 * Math.abs(n) % 60);
    return str + (from < 10 ? "0" : "") + from + ":" + (aByte < 10 ? "0" : "") + aByte;
}
/**
 * @param {!Array} arr
 * @return {?}
 */
function unique(arr) {
    return $.grep(arr, function (ch, chainID) {
        return chainID == $.inArray(ch, arr);
    });
}
/**
 * @param {string} value1
 * @param {string} value2
 * @return {?}
 */
function naturalCompare(value1, value2) {
    /** @type {!Array} */
    var a = [];
    /** @type {!Array} */
    var b = [];
    value1.replace(/(\d+)|(\D+)/g, function (canCreateDiscussions, isSlidingUp, mysqlDate) {
        a.push([isSlidingUp || 1 / 0, mysqlDate || ""]);
    });
    value2.replace(/(\d+)|(\D+)/g, function (canCreateDiscussions, isSlidingUp, mysqlDate) {
        b.push([isSlidingUp || 1 / 0, mysqlDate || ""]);
    });
    for (; a.length && b.length;) {
        var blockArray = a.shift();
        var array = b.shift();
        var o = blockArray[0] - array[0] || blockArray[1].localeCompare(array[1]);
        if (o) {
            return o;
        }
    }
    return a.length - b.length;
}
/**
 * @param {string} wikipedia_title
 * @return {?}
 */
function ConvertTo24Hr(wikipedia_title) {
    /** @type {string} */
    var title = wikipedia_title;
    /** @type {number} */
    var hour = Number(title.match(/^(\d+)/)[1]);
    /** @type {number} */
    var length = Number(title.match(/:(\d+)/)[1]);
    /** @type {number} */
    var number = Number(title.match(/:(\d+):(\d+)/)[2]);
    var PM = title.match(/:([^:]*)$/)[1];
    if ("PM" == PM && hour < 12) {
        /** @type {number} */
        hour = hour + 12;
    }
    if ("AM" == PM && 12 == hour) {
        /** @type {number} */
        hour = hour - 12;
    }
    /** @type {string} */
    var prepend = hour.toString();
    /** @type {string} */
    var code = length.toString();
    return hour < 10 && (prepend = "0" + prepend), length < 10 && (code = "0" + code), number < 10 && (number = "0" + number), prepend + ":" + code + ":" + number;
}
/**
 * @param {string} ar
 * @param {number} index
 * @param {string} name
 * @param {!Object} n
 * @return {?}
 */
function getCPU(ar, index, name, n) {
    var jObj;
    var chain_end_time;
    var vEventData;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").replace(/user/g, "usr").split("\n");
    /** @type {!Array} */
    var sessionOperatorStrings = [];
    /** @type {!Array} */
    var identities = [];
    (sessionOperatorStrings = jQuery.grep(savedValues, function (clusterShardData) {
        return "CPU-%usr" == clusterShardData.split(",")[0] && clusterShardData.split(",")[2] == ar;
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    var i = 0;
    for (; i < sessionOperatorStrings.length; i++) {
        identities.push(sessionOperatorStrings[i].split(",")[2]);
    }
    (identities = unique(identities)).sort(naturalCompare);
    /** @type {!Array} */
    var signaturesToValidate = [];
    /** @type {!Array} */
    var vals = [];
    /** @type {number} */
    i = 0;
    for (; i < sessionOperatorStrings.length; i++) {
        if (sessionOperatorStrings[i]) {
            vEventData = (vals = sessionOperatorStrings[i].split(","))[1].split("|");
        }
        /** @type {number} */
        var j = 0;
        for (; j < identities.length; j++) {
            if (vals[2] == identities[j]) {
                if ("Avera" == vEventData[1].substr(0, 5)) {
                    continue;
                }
                if ("00:00:01" == ConvertTo24Hr(vEventData[1])) {
                    continue;
                }
                /** @type {!Date} */
                var semiannualPing = new Date(Date.parse(vEventData[0] + " " + ConvertTo24Hr(vEventData[1])));
                signaturesToValidate.push([semiannualPing.getTime(), parseFloat(vals[index + 1])]);
            }
        }
    }
    if ("yes" == name) {
        var f = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            f.append(workRow.append($("<td></td>").html(signaturesToValidate[i][0])));
        }
        workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            f.append(workRow.append($("<td></td>").html(signaturesToValidate[i][1])));
        }
        $(n).html(f);
    }
    return signaturesToValidate;
}
/**
 * @param {string} computeOverlap
 * @param {number} index
 * @param {string} category
 * @param {string} name
 * @return {?}
 */
function getCPU2(computeOverlap, index, category, name) {
    var time;
    var jObj;
    var chain_end_time;
    var vEventData;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").replace(/user/g, "usr").split("\n");
    /** @type {!Array} */
    var stops = [];
    /** @type {!Array} */
    var paths = [];
    /** @type {number} */
    var value = 0;
    (stops = jQuery.grep(savedValues, function (clusterShardData) {
        return "CPU-%usr" == clusterShardData.split(",")[0];
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    var index = 0;
    for (; index < stops.length; index++) {
        paths.push(stops[index].split(",")[2]);
    }
    (paths = unique(paths)).sort(naturalCompare);
    /** @type {!Array} */
    var scales = [];
    /** @type {!Array} */
    var signaturesToValidate = [];
    /** @type {!Array} */
    var path = [];
    /** @type {number} */
    index = 0;
    for (; index < stops.length; index++) {
        if (stops[index]) {
            vEventData = (path = stops[index].split(","))[1].split("|");
        }
        /** @type {number} */
        var i = 0;
        for (; i < paths.length; i++) {
            if (path[2] == paths[i]) {
                var intYear = ConvertTo24Hr(vEventData[1]);
                if ("Avera" == vEventData[1].substr(0, 5)) {
                    continue;
                }
                if ("00:00:01" == intYear) {
                    continue;
                }
                /** @type {!Date} */
                var semiannualPing = new Date(Date.parse(vEventData[0] + " " + intYear));
                if (0 === i) {
                    scales.push(semiannualPing.getTime());
                }
                signaturesToValidate.push([semiannualPing.getTime(), parseFloat(path[index + 1])]);
            }
            time = parseFloat(path[index + 1]) > parseFloat(value) ? vEventData[0] + " " + ConvertTo24Hr(vEventData[1]) : time;
            value = parseFloat(path[index + 1]) > parseFloat(value) ? path[index + 1] : value;
        }
    }
    $(name).html(parseInt(value));
    $(name + "Time").html(time);
    $("#ulCPU").empty();
    /** @type {number} */
    var i = 0;
    for (; i < paths.length; i++) {
        $("#ulCPU").append('<li><a href="#" data-sns="' + i + '"><i class="fa fa-microchip" style="color: #6A55C2" aria-hidden="true"><span class="icon-bg bg-violet"></span></i>' + paths[i] + "</a></li>");
    }
    if ($("#cssmenu ul ul li:odd").addClass("odd"), $("#cssmenu ul ul li:even").addClass("even"), $("#ulCPU").on("click", "a", function (event) {
        chartPage();
        event.preventDefault();
        var reqPathStr = $(this).data("sns");
        getCPUchart(paths[reqPathStr]);
    }), "yes" == category) {
        var v = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < scales.length; i++) {
            v.append(workRow.append($("<td></td>").html(scales[i])));
        }
        workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            v.append(workRow.append($("<td></td>").html(signaturesToValidate[i][1])));
        }
        $(name).html(v);
    }
    return signaturesToValidate;
}
/**
 * @param {string} value
 * @param {number} type
 * @param {string} name
 * @param {!Object} n
 * @return {?}
 */
function getInterrupts(value, type, name, n) {
    var i;
    var jObj;
    var chain_end_time;
    var o;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    var pairs = [];
    /** @type {!Array} */
    var signaturesToValidate = [];
    /** @type {!Array} */
    var opt = [];
    (pairs = jQuery.grep(savedValues, function (clusterShardData) {
        return clusterShardData.split(",")[0] == value && "sum" == clusterShardData.split(",")[2];
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    i = 0;
    for (; i < pairs.length; i++) {
        if (pairs[i] && (o = (opt = pairs[i].split(","))[1].split("|")), opt[0] == value) {
            var intYear = ConvertTo24Hr(o[1]);
            if ("Avera" == o[1].substr(0, 5)) {
                continue;
            }
            if ("00:00:01" == intYear) {
                continue;
            }
            /** @type {!Date} */
            var semiannualPing = new Date(Date.parse(o[0] + " " + intYear));
            signaturesToValidate.push([semiannualPing.getTime(), parseFloat(opt[type + 1])]);
        }
    }
    if ("yes" == name) {
        var m = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            m.append(workRow.append($("<td></td>").html(prettyTime(signaturesToValidate[i][0]))));
        }
        workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            m.append(workRow.append($("<td></td>").html(signaturesToValidate[i][1])));
        }
        $(n).html(m);
    }
    return signaturesToValidate;
}
/**
 * @param {string} callback
 * @param {string} reply
 * @param {!Object} res
 * @return {undefined}
 */
function getDevices(callback, reply, res) {
    var index;
    var jObj;
    var chain_end_time;
    var vEventData;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    var stops = [];
    /** @type {!Array} */
    var values = [];
    (stops = jQuery.grep(savedValues, function (clusterShardData) {
        return clusterShardData.split(",")[0] == callback;
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {!Array} */
    values = [];
    /** @type {number} */
    index = 0;
    for (; index < stops.length; index++) {
        values.push(stops[index].split(",")[2]);
    }
    (values = unique(values)).sort(naturalCompare);
    /** @type {!Array} */
    var pool = [];
    /** @type {!Array} */
    var d = [];
    /** @type {!Array} */
    var todos = [];
    /** @type {!Array} */
    var matches = [];
    /** @type {!Array} */
    var times = [];
    /** @type {!Array} */
    var docs = [];
    /** @type {!Array} */
    var events = [];
    /** @type {!Array} */
    var columns = [];
    /** @type {!Array} */
    var buffers = [];
    /** @type {!Array} */
    var blocks = [];
    $("#ulDev").empty();
    /** @type {number} */
    var i = 0;
    for (; i < values.length; i++) {
        todos.push([]);
        matches.push([]);
        times.push([]);
        docs.push([]);
        events.push([]);
        columns.push([]);
        buffers.push([]);
        blocks.push([]);
        $("#ulDev").append('<li><a href="#" data-sns="' + i + '"><i class="fa fa-database" style="color: orange" aria-hidden="true"><span class="icon-bg bg-orange"></span></i>' + values[i] + "</a></li>");
    }
    $("#cssmenu ul ul li:odd").addClass("odd");
    $("#cssmenu ul ul li:even").addClass("even");
    /** @type {number} */
    index = 0;
    for (; index < stops.length; index++) {
        if (stops[index]) {
            vEventData = (d = stops[index].split(","))[1].split("|");
        }
        /** @type {number} */
        var i = 0;
        for (; i < values.length; i++) {
            if (d[2] == values[i]) {
                var intYear = ConvertTo24Hr(vEventData[1]);
                if ("Avera" == vEventData[1].substr(0, 5)) {
                    continue;
                }
                if ("00:00:01" == intYear) {
                    continue;
                }
                /** @type {!Date} */
                var semiannualPing = new Date(Date.parse(vEventData[0] + " " + intYear));
                if (0 === i) {
                    pool.push(semiannualPing.getTime());
                }
                todos[i].push([semiannualPing.getTime(), parseFloat(d[3])]);
                matches[i].push([semiannualPing.getTime(), parseFloat(d[4])]);
                times[i].push([semiannualPing.getTime(), parseFloat(d[5])]);
                docs[i].push([semiannualPing.getTime(), parseFloat(d[6])]);
                events[i].push([semiannualPing.getTime(), parseFloat(d[7])]);
                columns[i].push([semiannualPing.getTime(), parseFloat(d[8])]);
                buffers[i].push([semiannualPing.getTime(), parseFloat(d[9])]);
                blocks[i].push([semiannualPing.getTime(), parseFloat(d[10])]);
            }
        }
    }
    if ($("#ulDev").on("click", "a", function (event) {
        chartPage();
        event.preventDefault();
        var i = $(this).data("sns");
        $("#pageTitle").html("Block Transfer on " + values[i] + " for " + getHostname());
        $("#containerATitle").html("Total number of transfers per second that were issued to physical devices");
        $("#containerBTitle").html("Number of sectors read/written from/to the device");
        showNotes("B", "The size of a sector is 512 bytes");
        $("#containerCTitle").html("Average size/queue length for I/O requests that were issued to the device");
        $("#containerDTitle").html("Average time/service-time/utilization for I/O requests that were issued to the device");
        showNotes("D", "%util - Device saturation occurs when this value is close to 100%");
        printMultiChart("containerA", "Transfers per second to " + values[i], "tps/s", null, [{
            name: "tps/s",
            shadow: true,
            data: todos[i]
        }]);
        printMultiChart("containerB", "Number of sectors read/written from/to to " + values[i], "rd_sec/wr_sec /s", null, [{
            name: "rd_sec /s",
            shadow: true,
            data: matches[i]
        }, {
            name: "wr_sec /s",
            shadow: true,
            data: times[i]
        }]);
        printMultiChart("containerC", "Average size/queue length to " + values[i], "avgRq-sz/avrgqu-sz/await/svctm/%util", null, [{
            name: "The average size (in sectors) of the requests that were issued to the device (avrgrq-sz)",
            shadow: true,
            data: docs[i]
        }, {
            name: "The average queue length of the requests that were issued to the device (avrgqu-sz)",
            shadow: true,
            data: events[i]
        }]);
        printMultiChart("containerD", "Average time/service time/utilization to " + values[i], "avgRq-sz/avrgqu-sz/await/svctm/%util", null, [{
            name: "The average time [in ms] for I/O requests issued to the device to be served (await)",
            shadow: true,
            data: columns[i]
        }, {
            name: "The average service time [in ms] for I/O requests that were issued to the device (svctm)",
            shadow: true,
            data: buffers[i]
        }, {
            name: "Percentage of CPU time bandwidth utilization for the device (util %)",
            shadow: true,
            data: blocks[i]
        }]);
        hideBlock("D");
    }), "yes" == reply) {
        var x = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        var j = 0;
        for (; j < pool.length; j++) {
            x.append(workRow.append($("<td></td>").html(pool[j])));
        }
        /** @type {number} */
        i = 0;
        for (; i < values.length; i++) {
            workRow = $("<tr></tr>");
            /** @type {number} */
            j = 0;
            for (; j < matches[i].length; j++) {
                x.append(workRow.append($("<td></td>").html(matches[i][j][1])));
            }
        }
        $(res).html(x);
    }
}
/**
 * @param {string} charLoc
 * @param {string} name
 * @param {!Object} a
 * @return {undefined}
 */
function getInterfaceTraffic(charLoc, name, a) {
    var jObj;
    var chain_end_time;
    var vEventData;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    var sessionOperatorStrings = [];
    /** @type {!Array} */
    var fields = [];
    (sessionOperatorStrings = jQuery.grep(savedValues, function (clusterShardData) {
        return clusterShardData.split(",")[0] == charLoc;
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    var i = 0;
    for (; i < sessionOperatorStrings.length; i++) {
        fields.push(sessionOperatorStrings[i].split(",")[2]);
    }
    (fields = unique(fields)).sort(naturalCompare);
    /** @type {!Array} */
    var scales = [];
    /** @type {!Array} */
    var vals = [];
    /** @type {!Array} */
    var matches = [];
    /** @type {!Array} */
    var objs = [];
    /** @type {!Array} */
    var columns = [];
    /** @type {!Array} */
    var times = [];
    /** @type {!Array} */
    var all = [];
    /** @type {!Array} */
    var buffers = [];
    /** @type {!Array} */
    var series = [];
    $("#ulInterfaceTraffic").empty();
    /** @type {number} */
    var _g = 0;
    for (; _g < fields.length; _g++) {
        matches.push([]);
        objs.push([]);
        columns.push([]);
        times.push([]);
        all.push([]);
        buffers.push([]);
        series.push([]);
        $("#ulInterfaceTraffic").append('<li><a href="#" data-sns="' + _g + '"><i class="fa fa-road" style="color: #337ab7"> <span class="icon-bg bg-dodger"></span></i>' + fields[_g] + "</a></li>");
    }
    $("#cssmenu ul ul li:odd").addClass("odd");
    $("#cssmenu ul ul li:even").addClass("even");
    /** @type {number} */
    i = 0;
    for (; i < sessionOperatorStrings.length; i++) {
        if (sessionOperatorStrings[i]) {
            vEventData = (vals = sessionOperatorStrings[i].split(","))[1].split("|");
        }
        /** @type {number} */
        var j = 0;
        for (; j < fields.length; j++) {
            if (vals[2] == fields[j]) {
                var intYear = ConvertTo24Hr(vEventData[1]);
                if ("Avera" == vEventData[1].substr(0, 5)) {
                    continue;
                }
                if ("00:00:01" == intYear) {
                    continue;
                }
                /** @type {!Date} */
                var semiannualPing = new Date(Date.parse(vEventData[0] + " " + intYear));
                if (0 === j) {
                    scales.push(semiannualPing.getTime());
                }
                matches[j].push([semiannualPing.getTime(), parseFloat(vals[3])]);
                objs[j].push([semiannualPing.getTime(), parseFloat(vals[4])]);
                columns[j].push([semiannualPing.getTime(), parseFloat(vals[5])]);
                times[j].push([semiannualPing.getTime(), parseFloat(vals[6])]);
                all[j].push([semiannualPing.getTime(), parseFloat(vals[7])]);
                buffers[j].push([semiannualPing.getTime(), parseFloat(vals[8])]);
                series[j].push([semiannualPing.getTime(), parseFloat(vals[9])]);
            }
        }
    }
    if ($("#ulInterfaceTraffic").on("click", "a", function (event) {
        chartPage();
        event.preventDefault();
        var j = $(this).data("sns");
        printMultiChart("containerA", "Total number of packets received/transmitted per second on " + fields[j], "rxpck/s | txpck/s", null, [{
            name: "Total number of packets received per second (rxpck/s)",
            shadow: true,
            data: matches[j]
        }, {
            name: "Total number of packets transmitted per second (txpck/s)",
            shadow: true,
            data: objs[j]
        }]);
        printMultiChart("containerB", "Total number of kilobytes received/transmitted per second on " + fields[j], "rxkB/s | txkB/s", null, [{
            name: "Total number of kilobytes received per second (rxkB/s)",
            shadow: true,
            data: columns[j]
        }, {
            name: "Total number of kilobytes transmitted per second (txkB/s)",
            shadow: true,
            data: times[j]
        }]);
        printMultiChart("containerC", "Number of compressed/multicast packets received/transmitted per second on " + fields[j], "rxcmp/s | txcmp/s | rxmcst/s", null, [{
            name: "Number of compressed packets received per second (rxcmp/s)",
            shadow: true,
            data: all[j]
        }, {
            name: "Number of compressed packets transmitted per second (txcmp/s)",
            shadow: true,
            data: buffers[j]
        }, {
            name: "Number of multicast packets received per second (rxmcst/s)",
            shadow: true,
            data: series[j]
        }]);
    }), "yes" == name) {
        var x = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < scales.length; i++) {
            x.append(workRow.append($("<td></td>").html(scales[i])));
        }
        /** @type {number} */
        j = 0;
        for (; j < fields.length; j++) {
            workRow = $("<tr></tr>");
            /** @type {number} */
            i = 0;
            for (; i < objs[j].length; i++) {
                x.append(workRow.append($("<td></td>").html(objs[j][i][1])));
            }
        }
        $(a).html(x);
    }
}
/**
 * @param {string} charLoc
 * @param {string} name
 * @param {!Object} a
 * @return {undefined}
 */
function getInterfaceErrors(charLoc, name, a) {
    var i;
    var jObj;
    var chain_end_time;
    var vEventData;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    var sessionOperatorStrings = [];
    /** @type {!Array} */
    var fields = [];
    (sessionOperatorStrings = jQuery.grep(savedValues, function (clusterShardData) {
        return clusterShardData.split(",")[0] == charLoc;
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    i = 0;
    for (; i < sessionOperatorStrings.length; i++) {
        fields.push(sessionOperatorStrings[i].split(",")[2]);
    }
    (fields = unique(fields)).sort(naturalCompare);
    /** @type {!Array} */
    var scales = [];
    /** @type {!Array} */
    var vals = [];
    /** @type {!Array} */
    var matches = [];
    /** @type {!Array} */
    var columns = [];
    /** @type {!Array} */
    var times = [];
    /** @type {!Array} */
    var buffers = [];
    /** @type {!Array} */
    var objs = [];
    /** @type {!Array} */
    var all = [];
    /** @type {!Array} */
    var series = [];
    /** @type {!Array} */
    var addresses = [];
    /** @type {!Array} */
    var docs = [];
    $("#ulInterfaceErrors").empty();
    /** @type {number} */
    var _g = 0;
    for (; _g < fields.length; _g++) {
        matches.push([]);
        columns.push([]);
        times.push([]);
        buffers.push([]);
        objs.push([]);
        all.push([]);
        series.push([]);
        addresses.push([]);
        docs.push([]);
        $("#ulInterfaceErrors").append('<li><a href="#" data-sns="' + _g + '"><i class="fa fa-unlink" style="color: #c4183c" aria-hidden="true"><span class="icon-bg bg-red"></span></i> ' + fields[_g] + "</a></li>");
    }
    $("#cssmenu ul ul li:odd").addClass("odd");
    $("#cssmenu ul ul li:even").addClass("even");
    /** @type {number} */
    i = 0;
    for (; i < sessionOperatorStrings.length; i++) {
        if (sessionOperatorStrings[i]) {
            vEventData = (vals = sessionOperatorStrings[i].split(","))[1].split("|");
        }
        /** @type {number} */
        var j = 0;
        for (; j < fields.length; j++) {
            if (vals[2] == fields[j]) {
                var intYear = ConvertTo24Hr(vEventData[1]);
                if ("Avera" == vEventData[1].substr(0, 5)) {
                    continue;
                }
                if ("00:00:01" == intYear) {
                    continue;
                }
                /** @type {!Date} */
                var semiannualPing = new Date(Date.parse(vEventData[0] + " " + intYear));
                if (0 === j) {
                    scales.push(semiannualPing.getTime());
                }
                matches[j].push([semiannualPing.getTime(), parseFloat(vals[3])]);
                columns[j].push([semiannualPing.getTime(), parseFloat(vals[4])]);
                times[j].push([semiannualPing.getTime(), parseFloat(vals[5])]);
                buffers[j].push([semiannualPing.getTime(), parseFloat(vals[6])]);
                objs[j].push([semiannualPing.getTime(), parseFloat(vals[7])]);
                all[j].push([semiannualPing.getTime(), parseFloat(vals[8])]);
                series[j].push([semiannualPing.getTime(), parseFloat(vals[9])]);
                addresses[j].push([semiannualPing.getTime(), parseFloat(vals[10])]);
                docs[j].push([semiannualPing.getTime(), parseFloat(vals[11])]);
            }
        }
    }
    if ($("#ulInterfaceErrors").on("click", "a", function (event) {
        chartPage();
        event.preventDefault();
        var j = $(this).data("sns");
        printMultiChart("containerA", "Total number of bad packets received per second on " + fields[j], "rxerr/s | txerr/s | coll/s", null, [{
            name: "Total number of bad packets received per second (rxerr/s)",
            shadow: true,
            data: matches[j]
        }, {
            name: "Total number of errors that happened per second while transmitting packets (txerr/s)",
            shadow: true,
            data: columns[j]
        }, {
            name: "Number of collisions that happened per second while transmitting packets (coll/s)",
            shadow: true,
            data: times[j]
        }]);
        printMultiChart("containerB", "Number of received/transmitted packets dropped per second from linux buffers on " + fields[j], "rxdrop/s | txdrop/s | txcarr/s", null, [{
            name: "Number of received packets dropped per second because of a lack of space in linux buffers (rxdrop/s)",
            shadow: true,
            data: buffers[j]
        }, {
            name: "Number of transmitted packets dropped per second because of a lack of space in linux buffers (txdrop/s)",
            shadow: true,
            data: objs[j]
        }, {
            name: "Number of carrier-errors that happened per second while transmitting packets (txcarr/s)",
            shadow: true,
            data: all[j]
        }]);
        printMultiChart("containerC", "Number of [frame alignment/FIFO overrun] errors per second on received packets on " + fields[j], "rxfram/s | rxfifo/s | txfifo/s", null, [{
            name: "Number of frame alignment errors that happened per second on received packets (rxfram/s)",
            shadow: true,
            data: series[j]
        }, {
            name: "Number of FIFO overrun errors that happened per second on received packets (rxfifo/s)",
            shadow: true,
            data: addresses[j]
        }, {
            name: "Number of FIFO overrun errors that happened per second on transmitted packets (txfifo/s)",
            shadow: true,
            data: docs[j]
        }]);
    }), "yes" == name) {
        var linkCont = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < scales.length; i++) {
            linkCont.append(workRow.append($("<td></td>").html(scales[i])));
        }
        /** @type {number} */
        j = 0;
        for (; j < fields.length; j++) {
            workRow = $("<tr></tr>");
            /** @type {number} */
            i = 0;
            for (; i < objs[j].length; i++) {
                linkCont.append(workRow.append($("<td></td>").html(objs[j][i][1])));
            }
        }
        $(a).html(linkCont);
    }
}
/**
 * @param {string} type
 * @param {number} set
 * @param {string} expected
 * @param {string} name
 * @return {?}
 */
function getGenericData(type, set, expected, name) {
    var jObj;
    var chain_end_time;
    var o;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    var pairs = [];
    /** @type {!Array} */
    var signaturesToValidate = [];
    /** @type {!Array} */
    var d = [];
    /** @type {number} */
    var b = 0;
    /** @type {number} */
    var header = 0;
    /** @type {number} */
    var option = Math.pow(10, 1E3);
    /** @type {number} */
    var value = option;
    /** @type {number} */
    var label = option;
    (pairs = jQuery.grep(savedValues, function (clusterShardData) {
        return clusterShardData.split(",")[0] == type;
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    var i = 0;
    for (; i < pairs.length; i++) {
        if (pairs[i] && (o = (d = pairs[i].split(","))[1].split("|")), d[0] == type) {
            var str = ConvertTo24Hr(o[1]);
            if ("Avera" == o[1].substr(0, 5)) {
                continue;
            }
            if ("00:00:01" == str || "00:00:00" == str) {
                continue;
            }
            /** @type {!Date} */
            var semiannualPing = new Date(Date.parse(o[0] + " " + str));
            signaturesToValidate.push([semiannualPing.getTime(), parseFloat(d[set + 1])]);
            header = parseFloat(d[set + 1]) > parseFloat(b) ? o[0] + " " + str : header;
            b = parseFloat(d[set + 1]) > parseFloat(b) ? d[set + 1] : b;
            label = parseFloat(d[set + 1]) < parseFloat(value) ? o[0] + " " + str : label;
            value = parseFloat(d[set + 1]) < parseFloat(value) ? d[set + 1] : value;
        }
    }
    if ("SUNOS" == getOS() && "#peakMemory" == name ? ($(name).html(parseInt(value)), $(name + "Time").html(label)) : ($(name).html(parseInt(b)), $(name + "Time").html(header)), "yes" == expected) {
        var linkCont = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            linkCont.append(workRow.append($("<td></td>").html(prettyTime(signaturesToValidate[i][0]))));
        }
        workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            linkCont.append(workRow.append($("<td></td>").html(signaturesToValidate[i][1])));
        }
        $(name).html(linkCont);
    }
    return signaturesToValidate;
}
/**
 * @param {string} p
 * @param {number} set
 * @param {string} fn
 * @param {!Object} n
 * @return {?}
 */
function getMemoryFreeData(p, set, fn, n) {
    var jObj;
    var chain_end_time;
    var o;
    var savedValues = fileOut.replace(/^\s*$(?:\r\n?|\n)/gm, "\n").split("\n");
    /** @type {!Array} */
    var pairs = [];
    /** @type {!Array} */
    var signaturesToValidate = [];
    /** @type {!Array} */
    var row = [];
    (pairs = jQuery.grep(savedValues, function (clusterShardData) {
        return clusterShardData.split(",")[0] == p;
    })).sort(function (clusterShardData, certFileContent) {
        return jObj = clusterShardData.split(",")[1].split("|"), chain_end_time = certFileContent.split(",")[1].split("|"), Date.parse(jObj[0]) - Date.parse(chain_end_time[0]);
    });
    /** @type {number} */
    var i = 0;
    for (; i < pairs.length; i++) {
        if (pairs[i] && (o = (row = pairs[i].split(","))[1].split("|")), row[0] == p) {
            var intYear = ConvertTo24Hr(o[1]);
            if ("Avera" == o[1].substr(0, 5)) {
                continue;
            }
            if ("00:00:01" == intYear) {
                continue;
            }
            /** @type {!Date} */
            var semiannualPing = new Date(Date.parse(o[0] + " " + intYear));
            signaturesToValidate.push([semiannualPing.getTime(), parseFloat(row[set + 1]) + parseFloat(row[set + 4]) + parseFloat(row[set + 5])]);
        }
    }
    if ("yes" == fn) {
        var m = $("<table border=1></table>");
        var workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            m.append(workRow.append($("<td></td>").html(prettyTime(signaturesToValidate[i][0]))));
        }
        workRow = $("<tr></tr>");
        /** @type {number} */
        i = 0;
        for (; i < signaturesToValidate.length; i++) {
            m.append(workRow.append($("<td></td>").html(signaturesToValidate[i][1])));
        }
        $(n).html(m);
    }
    return signaturesToValidate;
}
myDate = new Date, $(".tdate").html(("0" + myDate.getDate()).slice(-2)), $(".tyear").html(myDate.getFullYear()), Highcharts.wrap(Highcharts.Chart.prototype, "getContainer", function (realPrint) {
    realPrint.call(this);
    /** @type {string} */
    this.container.style.background = "white";
}), Highcharts.theme = {
    colors: ["#f45b5b", "#8085e9", "#8d4654", "#527bad", "#aaeeee", "#ff0066", "#eeaaee", "#55BF3B", "#DF5353", "#0099ff", "#aaeeee"],
    chart: {
        backgroundColor: null,
        style: {
            fontFamily: "Metrophobic, Armata, Signika, arial, sans-serif"
        }
    },
    title: {
        useHTML: true,
        style: {
            color: "black",
            fontSize: "14px",
            fontWeight: "bold"
        }
    },
    subtitle: {
        style: {
            color: "grey",
            fontSize: "10px",
            fontWeight: "italic"
        }
    },
    tooltip: {
        borderWidth: 0
    },
    legend: {
        itemStyle: {
            fontWeight: "bold",
            fontSize: "10px"
        }
    },
    xAxis: {
        labels: {
            style: {
                color: "#6e6e70"
            }
        }
    },
    yAxis: {
        labels: {
            style: {
                color: "#6e6e70"
            }
        }
    },
    plotOptions: {
        series: {
            shadow: true
        },
        candlestick: {
            lineColor: "#404048"
        },
        map: {
            shadow: false
        }
    },
    navigator: {
        xAxis: {
            gridLineColor: "#D0D0D8"
        }
    },
    rangeSelector: {
        buttonTheme: {
            fill: "white",
            stroke: "#C0C0C8",
            "stroke-width": 1,
            states: {
                select: {
                    fill: "#D0D0D8"
                }
            }
        }
    },
    scrollbar: {
        trackBorderColor: "#C0C0C8"
    },
    background2: "#E0E0E8"
}, Highcharts.setOptions(Highcharts.theme);
/** @type {string} */
var grassGreen = "#55BF3B";
/** @type {string} */
var bluishPurple = "#527bad";
/** @type {string} */
var darkBrown = "#8d4654";
/** @type {string} */
var darkPink = "#ff0066";
/** @type {string} */
var crimsonRed = "#f45b5b";
/** @type {string} */
var bluishTeal = "#166c7d";
/** @type {string} */
var lightPurple = "#8085e9";
/** @type {string} */
var lightPink = "#eeaaee";
/** @type {string} */
var tomatoRed = "#DF5353";
/** @type {string} */
var dodgerBlue = "#0099ff";
/** @type {string} */
var lightBurgundy = "#cc6699";
/**
 * @param {number} mem
 * @param {number} options
 * @param {string} key
 * @param {?} type
 * @param {string} conf
 * @param {!Object} items
 * @return {?}
 */
function getChart(mem, options, key, type, conf, items) {
    /**
     * @param {?} dateIn
     * @return {?}
     */
    function dateFormat(dateIn) {
        return function (compareDate) {
            /** @type {number} */
            var b = compareDate.getMonth() + 1;
            /** @type {number} */
            var a = compareDate.getDate();
            /** @type {number} */
            var hours = compareDate.getHours();
            /** @type {number} */
            var tmp = compareDate.getMinutes();
            /** @type {(number|string)} */
            b = b < 10 ? "0" + b : b;
            /** @type {(number|string)} */
            a = a < 10 ? "0" + a : a;
            /** @type {string} */
            var ampm = hours >= 12 ? "pm" : "am";
            /** @type {string} */
            var clockStr = (hours = (hours = hours % 12) ? hours : 12) + ":" + (tmp = tmp < 10 ? "0" + tmp : tmp) + " " + ampm;
            return compareDate.getFullYear() + "" + b + a + "<br>" + clockStr;
        }(new Date(dateIn));
    }
    return JSON.stringify({
        chart: {
            borderColor: "#e0e0e0",
            borderWidth: 0,
            type: "line",
            marginRight: 20,
            height: 200
        },
        title: {
            text: null,
            x: -20
        },
        subtitle: {
            text: "<b>" + key + " for " + getHostname() + "</b>",
            x: -20
        },
        credits: {
            enabled: false
        },
        xAxis: {
            min: 0,
            tickInterval: 1,
            gridLineWidth: .5,
            type: "datetime",
            overflow: "justify",
            labels: {
                formatter: function () {
                    return dateFormat(this.value);
                }
            }
        },
        yAxis: {
            title: {
                text: key
            },
            min: mem,
            max: options,
            tickInterval: type
        },
        tooltip: {
            formatter: function () {
                return dateFormat(this.x) + ", " + this.y;
            }
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            line: {
                lineWidth: 1,
                marker: {
                    enabled: false
                },
                states: {
                    hover: {
                        lineWidth: 1
                    }
                }
            }
        },
        series: [{
            name: key,
            color: conf,
            data: items,
            shadow: true
        }],
        exporting: {
            enabled: false
        }
    });
}
/**
 * @param {string} container
 * @param {number} a
 * @param {!Object} b
 * @param {string} s
 * @param {?} index
 * @param {string} data
 * @param {!Object} items
 * @return {undefined}
 */
function printChart(container, a, b, s, index, data, items) {
    var hostname = getHostname();
    var capture_headings = s.split("(")[0];
    var _this = new Highcharts.Chart({
        chart: {
            borderColor: "#e0e0e0",
            borderWidth: 0,
            type: "line",
            marginRight: 20,
            zoomType: "xy",
            renderTo: container,
            backgroundColor: null
        },
        title: {
            text: capture_headings,
            useHTML: true,
            style: {
                color: "#fff",
                fontSize: "1.1em",
                fontWeight: "normal",
                backgroundColor: data,
                boxShadow: "inset 9px 9px 14px -2px rgba(0,0,0,0.35)",
                textShadow: "#474747 3px 3px 2px",
                padding: "5px 10px",
                borderRadius: "20px"
            }
        },
        credits: {
            enabled: false
        },
        subtitle: {
            text: hostname,
            x: 0,
            useHTML: true,
            style: {
                color: data,
                fontSize: ".7em"
            }
        },
        xAxis: {
            gridLineWidth: .5,
            type: "datetime",
            overflow: "justify",
            crosshair: true,
            labels: {
                formatter: function () {
                    return prettyTime(this.value);
                }
            }
        },
        yAxis: {
            title: {
                text: s
            },
            min: a,
            max: b,
            gridLineWidth: .5,
            tickInterval: index,
            crosshair: true
        },
        tooltip: {
            formatter: function () {
                return prettyTime(this.x) + ", " + this.y;
            },
            useHTML: true
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            area: {
                fillColor: {
                    linearGradient: {
                        x1: 0,
                        y1: 0,
                        x2: 0,
                        y2: 1
                    },
                    stops: [[0, Highcharts.getOptions().colors[0]], [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get("rgba")]]
                },
                marker: {
                    radius: 1
                },
                lineWidth: 1,
                states: {
                    hover: {
                        lineWidth: 1
                    }
                },
                threshold: null
            }
        },
        series: [{
            name: s,
            color: data,
            data: items,
            shadow: true
        }],
        exporting: {
            allowHTML: true,
            sourceWidth: 1400,
            scale: 1,
            chartOptions: {
                chart: {
                    width: document.getElementById(container).clientWidth,
                    height: document.getElementById(container).clientHeight
                },
                plotOptions: {
                    series: {
                        dataLabels: {
                            enabled: false
                        }
                    }
                }
            },
            buttons: {
                contextButton: {
                    menuItems: [{
                        textKey: "printChart",
                        onclick: function () {
                            var tiptext = this.options.subtitle.text;
                            this.setTitle(null, {
                                text: " "
                            });
                            this.print();
                            this.setTitle(null, {
                                text: tiptext
                            });
                        }
                    }, {
                        textKey: "fullscreenchange",
                        text: "View Fullscreen",
                        onclick: function () {
                            /** @type {string} */
                            this.backgroundColor = "white";
                            /**
                             * @param {!Node} context
                             * @return {undefined}
                             */
                            Highcharts.FullScreen = function (context) {
                                this.init(context.parentNode);
                            };
                            Highcharts.FullScreen.prototype = {
                                init: function (container) {
                                    if (container.requestFullscreen) {
                                        container.requestFullscreen();
                                    } else {
                                        if (container.mozRequestFullScreen) {
                                            container.mozRequestFullScreen();
                                        } else {
                                            if (container.webkitRequestFullscreen) {
                                                container.webkitRequestFullscreen();
                                            } else {
                                                if (container.msRequestFullscreen) {
                                                    container.msRequestFullscreen();
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            _this.fullscreen = new Highcharts.FullScreen(_this.container);
                        }
                    }, {
                        separator: true
                    }, {
                        textKey: "downloadPNG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/png"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }, {
                        textKey: "downloadJPEG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/jpeg"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }, {
                        textKey: "downloadPDF",
                        onclick: function () {
                            this.exportChart({
                                type: "application/pdf"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }, {
                        textKey: "downloadSVG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/svg+xml"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }]
                }
            }
        }
    });
}
/**
 * @param {?} canCreateDiscussions
 * @return {undefined}
 */
function chartFullScreen(canCreateDiscussions) {
    /**
     * @param {!Node} context
     * @return {undefined}
     */
    Highcharts.FullScreen = function (context) {
        this.init(context.parentNode);
    };
    Highcharts.FullScreen.prototype = {
        init: function (container) {
            if (container.requestFullscreen) {
                container.requestFullscreen();
            } else {
                if (container.mozRequestFullScreen) {
                    container.mozRequestFullScreen();
                } else {
                    if (container.webkitRequestFullscreen) {
                        container.webkitRequestFullscreen();
                    } else {
                        if (container.msRequestFullscreen) {
                            container.msRequestFullscreen();
                        }
                    }
                }
            }
        }
    };
    chart.fullscreen = new Highcharts.FullScreen(chart.container);
}
/**
 * @param {string} container
 * @param {string} p
 * @param {string} color
 * @param {?} done
 * @param {!Array} s
 * @return {undefined}
 */
function printMultiChart(container, p, color, done, s) {
    var hostname = getHostname();
    /** @type {!Array} */
    var allMatches = [grassGreen, bluishPurple, darkBrown, crimsonRed, tomatoRed, lightBurgundy, lightPink, lightPurple];
    var bgAreaColor = allMatches[Math.floor(Math.random() * allMatches.length)];
    new Highcharts.Chart({
        chart: {
            borderColor: "#e0e0e0",
            borderWidth: 0,
            type: "line",
            zoomType: "x",
            marginRight: 20,
            marginBottom: 70,
            renderTo: container
        },
        title: {
            text: p,
            useHTML: true,
            style: {
                color: "#fff",
                fontSize: "1.1em",
                fontWeight: "normal",
                backgroundColor: bgAreaColor,
                boxShadow: "inset 9px 9px 14px -2px rgba(0,0,0,0.35)",
                textShadow: "none",
                padding: "5px 10px",
                borderRadius: "20px"
            }
        },
        subtitle: {
            text: hostname,
            x: 0,
            useHTML: true,
            style: {
                color: bgAreaColor,
                fontSize: ".7em"
            }
        },
        credits: {
            enabled: false
        },
        xAxis: {
            gridLineWidth: .5,
            type: "datetime",
            overflow: "justify",
            crosshair: true,
            labels: {
                formatter: function () {
                    return prettyTime(this.value);
                }
            }
        },
        yAxis: {
            min: 0,
            title: {
                text: color
            },
            gridLineWidth: .5,
            tickInterval: done
        },
        legend: {
            layout: "horizontal",
            x: 0,
            y: 15
        },
        plotOptions: {
            line: {
                lineWidth: 1,
                marker: {
                    enabled: false
                },
                states: {
                    hover: {
                        lineWidth: 1
                    }
                }
            }
        },
        series: s,
        exporting: {
            allowHTML: true,
            sourceWidth: 1400,
            scale: 1,
            chartOptions: {
                chart: {
                    width: document.getElementById(container).clientWidth,
                    height: document.getElementById(container).clientHeight
                },
                plotOptions: {
                    series: {
                        dataLabels: {
                            enabled: false
                        }
                    }
                }
            },
            buttons: {
                contextButton: {
                    menuItems: [{
                        textKey: "printChart",
                        onclick: function () {
                            var tiptext = this.options.subtitle.text;
                            this.setTitle(null, {
                                text: " "
                            });
                            this.print();
                            this.setTitle(null, {
                                text: tiptext
                            });
                        }
                    }, {
                        textKey: "fullscreenchange",
                        text: "View Fullscreen",
                        onclick: function () {
                            /** @type {string} */
                            this.backgroundColor = "white";
                            /**
                             * @param {!Node} context
                             * @return {undefined}
                             */
                            Highcharts.FullScreen = function (context) {
                                this.init(context.parentNode);
                            };
                            Highcharts.FullScreen.prototype = {
                                init: function (container) {
                                    if (container.requestFullscreen) {
                                        container.requestFullscreen();
                                    } else {
                                        if (container.mozRequestFullScreen) {
                                            container.mozRequestFullScreen();
                                        } else {
                                            if (container.webkitRequestFullscreen) {
                                                container.webkitRequestFullscreen();
                                            } else {
                                                if (container.msRequestFullscreen) {
                                                    container.msRequestFullscreen();
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            chart.fullscreen = new Highcharts.FullScreen(chart.container);
                        }
                    }, {
                        separator: true
                    }, {
                        textKey: "downloadPNG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/png"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }, {
                        textKey: "downloadJPEG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/jpeg"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }, {
                        textKey: "downloadPDF",
                        onclick: function () {
                            this.exportChart({
                                type: "application/pdf"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }, {
                        textKey: "downloadSVG",
                        onclick: function () {
                            this.exportChart({
                                type: "image/svg+xml"
                            }, {
                                subtitle: {
                                    text: hostname
                                }
                            });
                        }
                    }]
                }
            }
        }
    });
}
/**
 * @param {string} el
 * @param {number} t
 * @param {string} color
 * @return {undefined}
 */
function printPieChart(el, t, color) {
    new Highcharts.Chart({
        chart: {
            renderTo: el,
            type: "pie",
            margin: [0, 0, 0, 0],
            spacingTop: 0,
            spacingBottom: 0,
            spacingLeft: 0,
            spacingRight: 0,
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false
        },
        title: null,
        tooltip: false,
        credits: false,
        plotOptions: {
            pie: {
                shadow: false,
                center: ["50%", "50%"],
                borderWidth: .5,
                borderColor: null,
                colors: ["#fff", "#DDDF00", "#ED561B", "#50B432", "#24CBE5", "#64E572", "#FF9655", "#FFF263", "#6AF9C4"]
            },
            series: {
                states: {
                    hover: {
                        enabled: false,
                        halo: {
                            size: 0
                        }
                    }
                }
            }
        },
        exporting: false,
        series: [{
            name: "",
            color: "black",
            data: [["value", t], {
                y: 100 - t,
                color: "rgba(0,0,0,0.1)"
            }],
            size: "100%",
            shadowColor: "teal",
            innerSize: "60%",
            showInLegend: false,
            dataLabels: {
                enabled: false
            }
        }]
    });
}
/**
 * @param {string} e
 * @return {undefined}
 */
function getCPUchart(e) {
    switch (displayTitle("CPU-" + e), getOS()) {
        case "LINUX":
            printChart("containerA", 0, null, "Percentage of CPU-" + e + " utilization at the user level [application] (%usr)", 10, lightBurgundy, getCPU(e, 2, "no", null));
            printChart("containerB", 0, null, "Percentage of CPU-" + e + " utilization at the user level with nice priority (%nice)", null, bluishPurple, getCPU(e, 3, "no", null));
            printChart("containerC", 0, 100, "Percentage of time that the CPU-" + e + " were idle with outstanding disk I/O request (%iowait)", 10, tomatoRed, getCPU(e, 5, "no", null));
            break;
        case "AIX":
        case "SUNOS":
            printChart("containerA", 0, null, "CPU Info", 10, "#166c7d", getGenericData("%usr-%sys", "Average,", 1, "no", null));
            hideBlock("B");
            hideBlock("C");
    }
    hideBlock("D");
}
$("#btnSAR").click(function () {
    homePage();
    getServerInfo();
    $("#pageTitle").html("");
    $("#containerA").html("");
    $("#containerB").html("");
    $("#containerC").html("");
    $("#containerD").html("");
    $("#btnSave").hide();
}), $("#btnCPU").click(function () {
    switch (displayTitle("CPU"), getOS()) {
        case "LINUX":
            break;
        case "AIX":
            var componentsStr = grepHeaders("%usr");
            if (-1 != componentsStr) {
                var optionalUrl = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...optionalUrl];
                var set = optionalUrl.indexOf("%usr") + 1;
                var keysByLightness = optionalUrl.indexOf("%sys") + 1;
                var s = optionalUrl.indexOf("%wio") + 1;
                var o = optionalUrl.indexOf("%idle") + 1;
                var legendset = optionalUrl.indexOf("physc") + 1;
                var nameOrPid = optionalUrl.indexOf("%entc") + 1;
                /** @type {string} */
                var id = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(optionalUrl + " | " + id + " | " + set + " | " + keysByLightness + " | " + s + " | " + o + " | " + legendset + " | " + nameOrPid);
                }
                printMultiChart("containerA", "Percentage of time the processor(s) spent in execution at the user/system", "%usr | %system", 1E3, [{
                    name: "Percentage of time the processor's spent in execution at the user (%usr)",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }, {
                    name: "Percentage of time the processor's spent in execution at the system (%system)",
                    shadow: true,
                    data: getGenericData(id, keysByLightness, "no", null)
                }]);
                printMultiChart("containerB", "Percentage of time the processor(s) were idle", "%wio | %idle", 1E3, [{
                    name: "Percentage of time the processor(s) were idle with outstanding disk/NFS I/O requests (%wio)",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }, {
                    name: "Percentage of time the processor(s) were idle with no outstanding disk/NFS I/O requests (%idle)",
                    shadow: true,
                    data: getGenericData(id, keysByLightness, "no", null)
                }]);
                printChart("containerC", 0, null, "Number of physical processors consumed", 10, "#166c7d", getGenericData(id, legendset, "no", null));
                showNotes("C", "physc - Reports the number of physical processors consumed. This data will be reported if the partition is dedicated and enabled for donation, or is running with shared processors or simultaneous multithreading enabled.");
                printChart("containerD", 0, null, "Percentage of entitled capacity consumed", 10, "#166c7d", getGenericData(id, nameOrPid, "no", null));
                showNotes("D", "%entc - Reports the percentage of entitled capacity consumed. This will be reported only if the partition is running with shared processors. Because the time base over which this data is computed can vary, the entitled capacity percentage can sometimes exceed 100%. This excess is noticeable only with small sampling intervals.");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "SUNOS":
            printChart("containerA", 0, null, "User (%usr)", 10, "#166c7d", getGenericData("%usr-%sys", 1, "no", null));
            printChart("containerB", 0, null, "System (%sys)", 10, bluishPurple, getGenericData("%usr-%sys", 2, "no", null));
            printChart("containerC", 0, null, "Waiting IO (%wio)", 10, "#55BF3B", getGenericData("%usr-%sys", 3, "no", null));
            printChart("containerD", 0, null, "Idle (%idle)", 10, "#2b908f", getGenericData("%usr-%sys", 4, "no", null));
    }
}), $("#btnProcs").click(function () {
    switch (displayTitle("Processes"), getOS()) {
        case "LINUX":
            if (-1 != (result = grepHeaders("proc/s"))) {
                var _ = result.split(",");
                /** @type {!Array} */
                var outChance = [..._];
                var legendset = _.indexOf("proc/s") + 1;
                var nameOrPid = _.indexOf("cswch/s") + 1;
                /** @type {string} */
                var name = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(_ + " -- " + name + " -- " + legendset + " -- " + nameOrPid);
                }
                printChart("containerA", 0, null, "Total number of tasks created per second (proc/s)", 10, darkBrown, getGenericData(name, legendset, "no", null));
                printChart("containerB", 0, null, "Total number of context switches per second (cswch/s)", 100, bluishPurple, getGenericData(name, nameOrPid, "no", null));
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            if (-1 != (result = grepHeaders("INTR"))) {
                _ = result.split(",");
                /** @type {!Array} */
                outChance = [..._];
                var s = _.indexOf("INTR") + 1;
                var nameOrPid = _.indexOf("intr/s") + 1;
                /** @type {string} */
                name = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(_ + " -- " + name + " -- " + s + " -- " + nameOrPid);
                }
                printChart("containerC", 0, null, "Total number of interrupts received per second (intr/s)", 100, grassGreen, getInterrupts(name, nameOrPid, "no", null));
            } else {
                hideBlock("C");
            }
            break;
        case "AIX":
            var result;
            if (-1 != (result = grepHeaders("proc-sz"))) {
                _ = result.split(",");
                /** @type {!Array} */
                outChance = [..._];
                legendset = _.indexOf("proc-sz") + 1;
                var rangeTypes = _.indexOf("inod-sz") + 1;
                var secondSet = _.indexOf("file-sz") + 1;
                var nameOrPid = _.indexOf("thrd-sz") + 1;
                /** @type {string} */
                name = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(_ + " | " + name + " | " + legendset + " | " + rangeTypes + " | " + secondSet + " | " + nameOrPid);
                }
                printChart("containerA", 0, null, "Process table status (proc-sz)", 10, darkBrown, getGenericData(name, legendset, "no", null));
                printChart("containerB", 0, null, "I-node table status (inod-sz)", 100, bluishPurple, getGenericData(name, rangeTypes, "no", null));
                printChart("containerB", 0, null, "File table status (file-sz)", 100, lightBurgundy, getGenericData(name, secondSet, "no", null));
                printChart("containerB", 0, null, "Kernel-thread table status (thrd-sz)", 100, grassGreen, getGenericData(name, nameOrPid, "no", null));
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "SUNOS":
            printChart("containerA", 0, null, "Processes (proc-sz)", 10, darkPink, getGenericData("proc-sz-ov", 1, "no", null));
            printChart("containerB", 0, null, "Inodes (inod-sz)", 10, grassGreen, getGenericData("proc-sz-ov", 3, "no", null));
            printChart("containerC", 0, null, "Files (file-sz)", 10, bluishPurple, getGenericData("proc-sz-ov", 5, "no", null));
            printChart("containerD", 0, null, "Locks (lock-sz)", 10, tomatoRed, getGenericData("proc-sz-ov", 7, "no", null));
    }
}), $("#btnSwap").click(function () {
    switch (displayTitle("Swapping"), getOS()) {
        case "LINUX":
            var componentsStr = grepHeaders("pswpin/s");
            if (-1 != componentsStr) {
                var exampleFolder = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...exampleFolder];
                var legendset = exampleFolder.indexOf("pswpin/s") + 1;
                var r = exampleFolder.indexOf("pswpout/s") + 1;
                /** @type {string} */
                var filename = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(exampleFolder + " -- " + filename + " -- " + legendset + " -- " + r);
                }
                printChart("containerA", 0, null, "Total number of swap pages the system brought in per second (pswpin/s)", null, grassGreen, getGenericData(filename, legendset, "no", null));
                printChart("containerB", 0, null, "Total number of swap pages the system brought out per second (pswpout/s)", null, bluishPurple, getGenericData(filename, r, "no", null));
                hideBlock("C");
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "AIX":
            break;
        case "SUNOS":
            printChart("containerA", 0, null, "Swap Page IN (swpin/s)", null, grassGreen, getGenericData("swpin/s-bswin/s", 1, "no", null));
            printChart("containerB", 0, null, "Swap Page OUT (swpot/s)", null, bluishPurple, getGenericData("swpin/s-bswin/s", 3, "no", null));
            printChart("containerC", 0, null, "Process Switches (pswch/s)", 10, bluishTeal, getGenericData("swpin/s-bswin/s", 5, "no", null));
            hideBlock("D");
    }
}), $("#btnPaging").click(function () {
    switch (displayTitle("System Paging"), getOS()) {
        case "LINUX":
            printMultiChart("containerA", "Number of system pages on disk", "pgpgin/s,pgpgout/s", 1E3, [{
                name: "System Paged in from disk (pgpgin/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 1, "no", null)
            }, {
                name: "System Paged out to disk (pgpgout/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 2, "no", null)
            }]);
            printMultiChart("containerB", "Number of system page faults", "fault/s,majflt/s", 1E3, [{
                name: "Number of page faults [major + minor] (fault/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 3, "no", null)
            }, {
                name: "Number of major faults (majflt/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 4, "no", null)
            }]);
            printMultiChart("containerC", "Number of system pages on free list", "pgfree/s,pgscank/s,pgscand/s,pgsteal/s", 1E3, [{
                name: "Number of pages placed on the free list by the system (pgfree/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 5, "no", null)
            }, {
                name: "Number of pages scanned by the kswapd daemon (pgscank/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 6, "no", null)
            }, {
                name: "Number of pages scanned directly (pgscand/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 7, "no", null)
            }, {
                name: "Number of pages the system has reclaimed from [page & swap] cache (pgsteal/s)",
                shadow: true,
                data: getGenericData("pgpgin/s-pgpgout/s", 8, "no", null)
            }]);
            printChart("containerD", 0, 100, "Metric of efficiency of page reclaim (%vmeff)", null, bluishPurple, getGenericData("pgpgin/s-pgpgout/s", 9, "no", null));
            showNotes("D", "%vmeff - Calculated as pgsteal / pgscan, this is a metric of the efficiency of page reclaim. If it is near 100% then almost every page coming off the tail of the inactive list is being reaped. If it gets too low (e.g. less than 30%) then the virtual memory is having some difficulty. This field is displayed as zero if no pages have been scanned during the interval of time.");
            break;
        case "AIX":
            var slotIds = grepHeaders("slots");
            if (-1 != slotIds) {
                var test = slotIds.split(",");
                /** @type {string} */
                var code = [...test].splice(0, 2).join("-");
                var legendset = test.indexOf("slots") + 1;
                var rangeTypes = test.indexOf("cycle/s") + 1;
                var secondSet = test.indexOf("fault/s") + 1;
                var nameOrPid = test.indexOf("odio/s") + 1;
                if (1 == DEBUG) {
                    console.log(test + " | " + code + " | slots:" + legendset + " | cycle/s:" + rangeTypes + " | fault/s:" + secondSet + " | odioIndex:" + nameOrPid);
                }
                printChart("containerA", 0, null, "Number of page replacement cycles per second (slots/s)", null, dodgerBlue, getGenericData(code, legendset, "no", null));
                printChart("containerB", 0, null, "Number of page replacement cycles per second (cycle/s)", null, bluishPurple, getGenericData(code, rangeTypes, "no", null));
                printChart("containerC", 0, null, "Number of page faults per second (fault/s)", null, lightBurgundy, getGenericData(code, secondSet, "no", null));
                printChart("containerD", 0, null, "Number of non paging disk I/Os per second (odio/s)", null, darkBrown, getGenericData(code, nameOrPid, "no", null));
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "SUNOS":
            printMultiChart("containerA", "Page In", "pgin/s,ppgin/s,atch/s", null, [{
                name: "Page-in requests (pgin/s)",
                shadow: true,
                data: getGenericData("atch/s-pgin/s", 2, "no", null)
            }, {
                name: "Pages paged-in (ppgin/s)",
                shadow: true,
                data: getGenericData("atch/s-pgin/s", 3, "no", null)
            }, {
                name: "Page Faults (pflt/s)",
                shadow: true,
                data: getGenericData("atch/s-pgin/s", 4, "no", null)
            }, {
                name: "Valid Page Faults (vflt/s)",
                shadow: true,
                data: getGenericData("atch/s-pgin/s", 5, "no", null)
            }, {
                name: "Page attaches (atch/s)",
                shadow: true,
                data: getGenericData("atch/s-pgin/s", 1, "no", null)
            }]);
            printMultiChart("containerB", "Page Out", "pgout/s,ppgin/s", null, [{
                name: "Page-out requests (pgout/s)",
                shadow: true,
                data: getGenericData("pgout/s-ppgout/s", 1, "no", null)
            }, {
                name: "Pages paged-out (ppgout/s)",
                shadow: true,
                data: getGenericData("pgout/s-ppgout/s", 3, "no", null)
            }, {
                name: "Pages Free (pgfree/s)",
                shadow: true,
                data: getGenericData("pgout/s-ppgout/s", 3, "no", null)
            }, {
                name: "Pages scanned (pgscan/s)",
                shadow: true,
                data: getGenericData("pgout/s-ppgout/s", 4, "no", null)
            }]);
            printMultiChart("containerC", "Paging", "pgfree/s,pgscan/s,slock/s,%ufs_ipf", null, [{
                name: "Software Locks (slock/s)",
                shadow: true,
                data: getGenericData("atch/s-pgin/s", 6, "no", null)
            }, {
                name: "UFS Inodes used (%ufs_ipf)",
                shadow: true,
                data: getGenericData("pgout/s-ppgout/s", 5, "no", null)
            }]);
            hideBlock("D");
    }
}), $("#btnFile").click(function () {
    switch (displayTitle("File"), getOS()) {
        case "LINUX":
            break;
        case "AIX":
            if (-1 != (componentsStr = grepHeaders("iget/s"))) {
                var legendset = (type = componentsStr.split(",")).indexOf("iget/s") + 1;
                var t = type.indexOf("lookuppn/s") + 1;
                var a = type.indexOf("dirblk/s") + 1;
                /** @type {string} */
                var name = [...type].splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(type + " | " + name + " | iget/s:" + legendset + " | lookuppn/s:" + t + " | dirblk/s:" + a);
                }
                printChart("containerA", 0, null, "Calls to any of several i-node lookup routines (iget/s)", null, tomatoRed, getGenericData(name, 1, "no", null));
                showNotes("A", "iget/s - Calls to any of several i-node lookup routines that support multiple file system types. The iget routines return a pointer to the i-node structure of a file or device.");
                printChart("containerB", 0, null, "Calls to the directory search routine (lookuppn/s)", null, bluishPurple, getGenericData(name, 2, "no", null));
                showNotes("B", "lookuppn/s - Calls to the directory search routine that finds the address of a v-node given a path name");
                printChart("containerC", 0, null, "Number of 512-byte blocks read by the directory search routine (dirbk/s)", null, dodgerBlue, getGenericData(name, 3, "no", null));
                showNotes("C", "dirbk/s - Number of 512-byte blocks read by the directory search routine to locate a directory entry for a specific file");
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "SUNOS":
            var componentsStr;
            if (-1 != (componentsStr = grepHeaders("iget/s"))) {
                legendset = (type = componentsStr.split(",")).indexOf("iget/s") + 1;
                var type;
                var rangeTypes = type.indexOf("namei/s") + 1;
                a = type.indexOf("dirblk/s") + 1;
                /** @type {string} */
                name = [...type].splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(type + " | " + name + " | iget/s:" + legendset + " | namei/s:" + rangeTypes + " | dirblk/s:" + a);
                }
                printChart("containerA", 0, null, "Calls to any of several i-node lookup routines (iget/s)", null, tomatoRed, getGenericData(name, legendset, "no", null));
                showNotes("A", "iget/s - Calls to any of several i-node lookup routines that support multiple file system types. The iget routines return a pointer to the i-node structure of a file or device.");
                printChart("containerB", 0, null, "Calls to the directory search routine (namei/s)", null, bluishPurple, getGenericData(name, rangeTypes, "no", null));
                showNotes("B", "lookuppn/s - Calls to the directory search routine that finds the address of a v-node given a path name");
                printChart("containerC", 0, null, "Number of 512-byte blocks read by the directory search routine (dirbk/s)", null, dodgerBlue, getGenericData(name, a, "no", null));
                showNotes("C", "dirbk/s - Number of 512-byte blocks read by the directory search routine to locate a directory entry for a specific file");
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), $("#btnTTY").click(function () {
    switch (displayTitle("tty"), getOS()) {
        case "LINUX":
            break;
        case "AIX":
        case "SUNOS":
            var componentsStr = grepHeaders("rawch/s");
            if (-1 != componentsStr) {
                var optionalUrl = componentsStr.split(",");
                var set = optionalUrl.indexOf("rawch/s") + 1;
                var keysByLightness = optionalUrl.indexOf("canch/s") + 1;
                var GOLD_REQ = optionalUrl.indexOf("outch/s") + 1;
                var PL$171 = optionalUrl.indexOf("rcvin/s") + 1;
                var legendset = optionalUrl.indexOf("xmtin/s") + 1;
                var filepath = optionalUrl.indexOf("mdmin/s") + 1;
                /** @type {string} */
                var id = [...optionalUrl].splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(optionalUrl + " | " + id + " | rawch/s:" + set + " | canch/s:" + keysByLightness + " | outch/s:" + GOLD_REQ + " | rcvin/s:" + PL$171 + " | xmtin/s:" + legendset + " | mdmin/s:" + filepath);
                }
                printMultiChart("containerA", "tty Character Rate", "rawch/s | canch/s | outch/s", null, [{
                    name: "Input Character rate (rawch/s)",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }, {
                    name: "Canonical character rate (canch/s)",
                    shadow: true,
                    data: getGenericData(id, keysByLightness, "no", null)
                }, {
                    name: "Output character rate (outch/s)",
                    shadow: true,
                    data: getGenericData(id, GOLD_REQ, "no", null)
                }]);
                printMultiChart("containerB", "tty Interrupt Rate", "rcvin/s | xmtin/s | mdmin/s", null, [{
                    name: "Receive Interrupt rate (rcvin/s) ",
                    shadow: true,
                    data: getGenericData(id, PL$171, "no", null)
                }, {
                    name: "Transmit Interrupt rate (xmtin/s)",
                    shadow: true,
                    data: getGenericData(id, legendset, "no", null)
                }, {
                    name: "Modem Interrupt rate (mdmin/s)",
                    shadow: true,
                    data: getGenericData(id, filepath, "no", null)
                }]);
                hideBlock("C");
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), $("#btnIO").click(function () {
    switch (displayTitle("IO"), getOS()) {
        case "LINUX":
            if (-1 != (componentsStr = grepHeaders("tps"))) {
                var $ = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...$];
                var a = $.indexOf("tps") + 1;
                var n = $.indexOf("rtps") + 1;
                var r = $.indexOf("wtps") + 1;
                var set = $.indexOf("bread/s") + 1;
                var ticketID = $.indexOf("bwrtn/s") + 1;
                /** @type {string} */
                var index = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log($ + " | " + index + " | tps:" + a + " | rtps:" + n + " | wtps:" + r + " | bread/s:" + set + " | bwrtn/s:" + ticketID);
                }
                printChart("containerA", 0, null, "Total number of transfers per second that were issued to physical devices (tps)", 100, "#166c7d", getGenericData("tps-rtps", 1, "no", null));
                printMultiChart("containerB", "Total amount of data read/write from/to the devices in blocks per second", "bread/s | bwrtn/s", 1E3, [{
                    name: "Total amount of data read from the devices in blocks per second (bread/s)",
                    shadow: true,
                    data: getGenericData("tps-rtps", 4, "no", null)
                }, {
                    name: "Total amount of data written to the devices in blocks per second (bwrtn/s)",
                    shadow: true,
                    data: getGenericData("tps-rtps", 5, "no", null)
                }]);
                showNotes("B", "bread/s - Blocks are equivalent to sectors with 2.4 kernels and newer and therefore have a size of 512 bytes. With older kernels, a block is of indeterminate size");
                printMultiChart("containerC", "Total number of read/write requests per second issued to physical devices", "rtps/wtps", 100, [{
                    name: "Total number of read requests per second (rtps)",
                    shadow: true,
                    data: getGenericData("tps-rtps", 2, "no", null)
                }, {
                    name: "Total number of write requests per second (wtps)",
                    shadow: true,
                    data: getGenericData("tps-rtps", 3, "no", null)
                }]);
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "AIX":
            var componentsStr;
            if (-1 != (componentsStr = grepHeaders("bread/s"))) {
                $ = componentsStr.split(",");
                /** @type {!Array} */
                outChance = [...$];
                set = $.indexOf("bread/s") + 1;
                var keysByLightness = $.indexOf("bwrit/s") + 1;
                var GOLD_REQ = $.indexOf("lread/s") + 1;
                var PL$171 = $.indexOf("lwrit/s") + 1;
                var legendset = $.indexOf("%rcache") + 1;
                var bannerCommonData = $.indexOf("%wcache") + 1;
                var itemMax = $.indexOf("pread/s") + 1;
                var filepath = $.indexOf("pwrit/s") + 1;
                /** @type {string} */
                index = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log($ + " | " + index + " | bread/s:" + set + " | bwrit/s:" + keysByLightness + " | lread/s:" + GOLD_REQ + " | lwrit/s:" + PL$171 + " | %rcache:" + legendset + " | %wcache:" + bannerCommonData + " | %pread/s:" + itemMax + " | pwrit/s:" + filepath);
                }
                printMultiChart("containerA", "Reports the number of block I/O operations", "bread/s | bwrit/s", 1E3, [{
                    name: "Block I/O read operations",
                    shadow: true,
                    data: getGenericData(index, set, "no", null)
                }, {
                    name: "Block I/O write operations",
                    shadow: true,
                    data: getGenericData(index, keysByLightness, "no", null)
                }]);
                printMultiChart("containerB", "Reports the number of logical I/O requests", "lread/s | lwrit/s", 1E3, [{
                    name: "Logical I/O Read requests",
                    shadow: true,
                    data: getGenericData(index, GOLD_REQ, "no", null)
                }, {
                    name: "Logical I/O Write requests",
                    shadow: true,
                    data: getGenericData(index, PL$171, "no", null)
                }]);
                printMultiChart("containerC", "Reports the number of I/O operations on raw devices", "pread/s | pwrit/s", 1E3, [{
                    name: "Raw I/O read operations",
                    shadow: true,
                    data: getGenericData(index, itemMax, "no", null)
                }, {
                    name: "Raw I/O write operations",
                    shadow: true,
                    data: getGenericData(index, filepath, "no", null)
                }]);
                printMultiChart("containerD", "Reports caching effectiveness (cache hit percentage)", "%rcache | %wcache", 1E3, [{
                    name: "Read Cache Hit Percentage",
                    shadow: true,
                    data: getGenericData(index, legendset, "no", null)
                }, {
                    name: "Write Cache Hit Percentage",
                    shadow: true,
                    data: getGenericData(index, bannerCommonData, "no", null)
                }]);
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "SUNOS":
            printMultiChart("containerA", "Buffers", "(Block Reads)", null, [{
                name: "IO (Block Reads)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 1, "no", null)
            }, {
                name: "IO (Read Access of Buffers)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 2, "no", null)
            }, {
                name: "IO (Read Cache)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 3, "no", null)
            }, {
                name: "IO (Physical Read)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 7, "no", null)
            }]);
            printMultiChart("containerB", "Buffers", "(Block Writes)", null, [{
                name: "IO (Block Writes)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 4, "no", null)
            }, {
                name: "IO (Write Access of Buffers)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 5, "no", null)
            }, {
                name: "IO (Write Cache)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 6, "no", null)
            }, {
                name: "IO (Physical Write)",
                shadow: true,
                data: getGenericData("bread/s-lread/s", 8, "no", null)
            }]);
            hideBlock("C");
            hideBlock("D");
    }
}), $("#btnPage").click(function () {
    switch (displayTitle("Page"), getOS()) {
        case "LINUX":
            printChart("containerA", null, null, "Number of memory pages freed per second (frmpg/s)", 100, "#166c7d", getGenericData("frmpg/s-bufpg/s", 1, "no", null));
            printChart("containerB", null, null, "Number of additional memory pages used as buffers per second (bufpg/s)", null, bluishPurple, getGenericData("frmpg/s-bufpg/s", 2, "no", null));
            printChart("containerC", null, null, "Number of additional memory pages cached per second (campg/s)", 100, "#90ee7e", getGenericData("frmpg/s-bufpg/s", 3, "no", null));
            hideBlock("D");
    }
}), $("#btnMemAlloc").click(function () {
    switch (displayTitle("Memory"), getOS()) {
        case "LINUX":
        case "AIX":
            break;
        case "SUNOS":
            printMultiChart("containerA", "Kernel Memory Allocation (Small)", "sml_mem|alloc|fail", null, [{
                name: "Small Page",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 1, "no", null)
            }, {
                name: "Canon character rate",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 2, "no", null)
            }, {
                name: "Output character rate",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 3, "no", null)
            }]);
            printMultiChart("containerB", "Kernel Memory Allocation (Large)", "lg_mem|alloc|fail", null, [{
                name: "Large Page",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 4, "no", null)
            }, {
                name: "Transmit Interrupt rate",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 5, "no", null)
            }, {
                name: "Modem Interrupt rate",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 6, "no", null)
            }]);
            printMultiChart("containerC", "Kernel Memory Allocation (Oversized)", "ovsz_alloc|fail", null, [{
                name: "Oversized Page",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 7, "no", null)
            }, {
                name: "Transmit Interrupt rate",
                shadow: true,
                data: getGenericData("sml_mem-alloc", 8, "no", null)
            }]);
            hideBlock("D");
    }
}), $("#btnLoad").click(function () {
    switch (displayTitle("Load"), getOS()) {
        case "LINUX":
            if (-1 != (componentsStr = grepHeaders("runq-sz"))) {
                var test = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...test];
                var legendset = test.indexOf("runq-sz") + 1;
                var rangeTypes = test.indexOf("plist-sz") + 1;
                var set = test.indexOf("ldavg-1") + 1;
                var keysByLightness = test.indexOf("ldavg-5") + 1;
                var filepath = test.indexOf("ldavg-15") + 1;
                var secondSet = test.indexOf("blocked") + 1;
                /** @type {string} */
                var type = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(test + " -- " + type + " -- " + legendset + " -- " + rangeTypes + " -- " + set + " -- " + keysByLightness + " -- " + filepath);
                }
                printChart("containerA", 0, null, "Run queue length [no. of tasks waiting for run time] (runq-sz)", null, lightBurgundy, getGenericData(type, legendset, "no", null));
                printMultiChart("containerB", "System Load Average", "System Load Average", null, [{
                    name: "System load average for the last minute",
                    data: getGenericData(type, set, "no", null)
                }, {
                    name: "System load average for the past 5 minutes",
                    data: getGenericData(type, keysByLightness, "no", null)
                }, {
                    name: "System load average for the past 15 minutes",
                    data: getGenericData(type, filepath, "no", null)
                }]);
                printChart("containerC", null, null, "Number of tasks in task list (plist-sz)", null, dodgerBlue, getGenericData(type, rangeTypes, "no", null));
                if (secondSet > 1) {
                    printChart("containerD", null, null, "Number of tasks currently blocked, waiting for I/O to complete (blocked)", null, darkBrown, getGenericData(type, secondSet, "no", null));
                } else {
                    hideBlock("D");
                }
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "AIX":
            if (-1 != (componentsStr = grepHeaders("runq-sz"))) {
                test = componentsStr.split(",");
                /** @type {!Array} */
                outChance = [...test];
                legendset = test.indexOf("runq-sz") + 1;
                var rangeTypes = test.indexOf("%runocc") + 1;
                var secondSet = test.indexOf("swpq-sz") + 1;
                var nameOrPid = test.indexOf("%swpocc") + 1;
                /** @type {string} */
                type = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(test + " | " + type + " | runq-sz:" + legendset + " | %runocc:" + rangeTypes + " | swpq-sz:" + secondSet + " | %swpocc:" + nameOrPid);
                }
                printChart("containerA", 0, null, "Run queue length [number of tasks waiting for run time] (runq-sz)", null, lightBurgundy, getGenericData(type, 1, "no", null));
                printChart("containerB", null, null, "Percentage of the time the run queue is occupied (%runocc)", null, dodgerBlue, getGenericData(type, rangeTypes, "no", null));
                printChart("containerC", null, null, "Average number of kernel threads that are waiting on resources (swpq-sz)", null, bluishPurple, getGenericData(type, secondSet, "no", null));
                printChart("containerD", null, null, "Percentage of the time the swap queue is occupied (%swpocc)", null, darkBrown, getGenericData(type, nameOrPid, "no", null));
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "SUNOS":
            var componentsStr;
            if (-1 != (componentsStr = grepHeaders("runq-sz"))) {
                test = componentsStr.split(",");
                /** @type {!Array} */
                outChance = [...test];
                legendset = test.indexOf("runq-sz") + 1;
                rangeTypes = test.indexOf("%runocc") + 1;
                secondSet = test.indexOf("swpq-sz") + 1;
                nameOrPid = test.indexOf("%swpocc") + 1;
                /** @type {string} */
                type = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(test + " | " + type + " | runq-sz:" + legendset + " | %runocc:" + rangeTypes + " | swpq-sz:" + secondSet + " | %swpocc:" + nameOrPid);
                }
                printChart("containerA", 0, null, "Run queue of kernel threads in memory and runnable (runq-sz)", null, lightBurgundy, getGenericData(type, legendset, "no", null));
                printChart("containerB", null, null, "Percentage of the time the run queue is occupied (%runocc)", null, dodgerBlue, getGenericData(type, rangeTypes, "no", null));
                printChart("containerC", null, null, "Swap queue of processes (swpq-sz)", null, bluishPurple, getGenericData("runq-sz-%runocc", secondSet, "no", null));
                printChart("containerD", null, null, "Percentage of the time the swap queue is occupied (%swpocc)", null, darkBrown, getGenericData(type, nameOrPid, "no", null));
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), $("#btnNFSClient").click(function () {
    switch (displayTitle("NFS Client"), getOS()) {
        case "LINUX":
            printMultiChart("containerA", "Number of RPC requests made per second", "call/s | retrans/s", null, [{
                name: "Number of RPC requests made per second (call/s)",
                shadow: true,
                data: getGenericData("call/s-retrans/s", 1, "no", null)
            }, {
                name: "The total number of segments retransmitted per second (retrans/s)",
                shadow: true,
                data: getGenericData("call/s-retrans/s", 2, "no", null)
            }]);
            printMultiChart("containerB", 'Number of "read/write" RPC calls made per second', "read/s | write/s", null, [{
                name: "Number of 'read' RPC calls made per second (read/s)",
                shadow: true,
                data: getGenericData("call/s-retrans/s", 3, "no", null)
            }, {
                name: "Number of 'write' RPC calls made per second (write/s)",
                shadow: true,
                data: getGenericData("call/s-retrans/s", 4, "no", null)
            }]);
            printMultiChart("containerC", 'Number of "access/getatt" RPC calls made per second', "access/s getatt/s", null, [{
                name: "Number of 'access' RPC calls made per second (access/s)",
                shadow: true,
                data: getGenericData("call/s-retrans/s", 5, "no", null)
            }, {
                name: "Number of 'getattr' RPC calls made per second (getatt/s)",
                shadow: true,
                data: getGenericData("call/s-retrans/s", 6, "no", null)
            }]);
            hideBlock("D");
            break;
        case "AIX":
            $("#containerA").html("No data for NFS Client available");
            hideBlock("B");
            hideBlock("C");
            hideBlock("D");
    }
}), $("#btnNFSServer").click(function () {
    switch (displayTitle("NFS Server"), getOS()) {
        case "LINUX":
            printMultiChart("containerA", "Number of RPC requests received per second", "scall/badcall/saccess/sgetatt per second", null, [{
                name: "Number of RPC requests received per second (scall/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 1, "no", null)
            }, {
                name: "Number of bad RPC requests received per second (badcall/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 2, "no", null)
            }, {
                name: "Number of 'access' RPC calls received per second (saccess/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 10, "no", null)
            }, {
                name: "Number of 'getattr' RPC calls received per second (sgetatt/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 11, "no", null)
            }]);
            printMultiChart("containerB", "Number of network packets received per second", "packet/udp/tcp per second", null, [{
                name: "Number of network packets received per second (packet/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 3, "no", null)
            }, {
                name: "Number of UDP packets received per second (udp/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 4, "no", null)
            }, {
                name: "Number of TCP packets received per second (tcp/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 5, "no", null)
            }]);
            printMultiChart("containerC", 'Number of "hit/miss/sread/swrite" received per second', "hit/miss/sread/swrite per second", null, [{
                name: "Number of reply cache hits per second (hit/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 6, "no", null)
            }, {
                name: "Number of reply cache misses per second (miss/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 7, "no", null)
            }, {
                name: "Number of 'read' RPC calls received per second (sread/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 8, "no", null)
            }, {
                name: "Number of 'write' RPC calls received per second (swrite/s)",
                shadow: true,
                data: getGenericData("scall/s-badcall/s", 9, "no", null)
            }]);
            break;
        case "AIX":
            printMultiChart("containerA", "NFS Server", "scall/sread/swrit /s", null, [{
                name: "scall/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 1, "no", null)
            }, {
                name: "sread/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 2, "no", null)
            }, {
                name: "swrit/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 3, "no", null)
            }]);
            printMultiChart("containerB", "NFS Server", "fork/exec /s", null, [{
                name: "fork/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 4, "no", null)
            }, {
                name: "exec/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 5, "no", null)
            }]);
            printMultiChart("containerC", "NFS Server", "rchar/wchar /s", null, [{
                name: "rchar/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 6, "no", null)
            }, {
                name: "wchar/s",
                shadow: true,
                data: getGenericData("scall/s-sread/s", 7, "no", null)
            }]);
    }
    hideBlock("D");
}), $("#btnSysCalls").click(function () {
    switch (displayTitle("System Calls"), getOS()) {
        case "LINUX":
            break;
        case "AIX":
        case "SUNOS":
            var componentsStr = grepHeaders("scall/s");
            if (-1 != componentsStr) {
                var locale = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...locale];
                var set = locale.indexOf("scall/s") + 1;
                var keysByLightness = locale.indexOf("sread/s") + 1;
                var GOLD_REQ = locale.indexOf("swrit/s") + 1;
                var PL$171 = locale.indexOf("fork/s") + 1;
                var legendset = locale.indexOf("exec/s") + 1;
                var bannerCommonData = locale.indexOf("rchar/s") + 1;
                var filepath = locale.indexOf("wchar/s") + 1;
                /** @type {string} */
                var id = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(locale + " | " + id + " | scall/s:" + set + " | sread/s:" + keysByLightness + " | swrit/s:" + GOLD_REQ + " | fork/s:" + PL$171 + " | exec/s:" + legendset + " | rchar/s:" + bannerCommonData + " | wchar/s:" + filepath);
                }
                printMultiChart("containerA", "Total number of read/write system calls", "sread/s |swrit/s", null, [{
                    name: "sread/s",
                    shadow: true,
                    data: getGenericData(id, keysByLightness, "no", null)
                }, {
                    name: "swrit/s",
                    shadow: true,
                    data: getGenericData(id, GOLD_REQ, "no", null)
                }]);
                printMultiChart("containerB", "Total number of system calls", "scall/s", null, [{
                    name: "scall/s",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }]);
                printMultiChart("containerC", "Total number of fork and exec system calls", "fork/s | exec/s", null, [{
                    name: "fork/s",
                    shadow: true,
                    data: getGenericData(id, PL$171, "no", null)
                }, {
                    name: "exec/s",
                    shadow: true,
                    data: getGenericData(id, legendset, "no", null)
                }]);
                printMultiChart("containerD", "Total number of characters transferred by read/write system calls", "rchar/s | wchar/s", null, [{
                    name: "rchar/s",
                    shadow: true,
                    data: getGenericData(id, bannerCommonData, "no", null)
                }, {
                    name: "wchar/s",
                    shadow: true,
                    data: getGenericData(id, filepath, "no", null)
                }]);
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), $("#btnSockets").click(function () {
    switch (displayTitle("Sockets"), getOS()) {
        case "LINUX":
            var componentsStr = grepHeaders("totsck");
            if (-1 != componentsStr) {
                var optionalUrl = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...optionalUrl];
                var legendset = optionalUrl.indexOf("totsck") + 1;
                var rangeTypes = optionalUrl.indexOf("ip-frag") + 1;
                var set = optionalUrl.indexOf("tcpsck") + 1;
                var keysByLightness = optionalUrl.indexOf("udpsck") + 1;
                var filepath = optionalUrl.indexOf("rawsck") + 1;
                /** @type {string} */
                var id = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(optionalUrl + " | " + id + " | totsck:" + legendset + " | ip-frag:" + rangeTypes + " | tcpsck:" + set + " | udpsck:" + keysByLightness + " | rawsck:" + filepath);
                }
                printChart("containerA", 100, null, "Total number of sockets used by the system (totsck)", null, "#166c7d", getGenericData(id, legendset, "no", null));
                printChart("containerB", null, null, "Number of IP fragments currently in use (ip-frag)", null, "#527bad", getGenericData(id, rangeTypes, "no", null));
                printMultiChart("containerC", "Number of Sockets currently in use", "tcp/udp/raw sockets", 1, [{
                    name: "Number of TCP sockets (tcpsck)",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }, {
                    name: "Number of UDP sockets (udpsck)",
                    shadow: true,
                    data: getGenericData(id, keysByLightness, "no", null)
                }, {
                    name: "Number of RAW sockets (rawsck)",
                    shadow: true,
                    data: getGenericData(id, filepath, "no", null)
                }]);
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), $("#btnSwapUsg").click(function () {
    switch (displayTitle("Swap Usage"), getOS()) {
        case "LINUX":
            var componentsStr = grepHeaders("kbswpfree");
            if (-1 != componentsStr) {
                var optionalUrl = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...optionalUrl];
                var legendset = optionalUrl.indexOf("kbswpfree") + 1;
                var r = optionalUrl.indexOf("kbswpused") + 1;
                var filepath = optionalUrl.indexOf("%swpused") + 1;
                var set = optionalUrl.indexOf("%swpcad") + 1;
                /** @type {string} */
                var id = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(optionalUrl + " -- " + id + " -- " + legendset + " -- " + r + " -- " + filepath);
                }
                printChart("containerA", 0, null, "Amount of free swap space in kilobytes (kbswpfree)", null, "#166c7d", getGenericData(id, legendset, "no", null));
                printMultiChart("containerB", "Amount of used swap space in kilobytes", "kbswpused | kbswpcad ", null, [{
                    name: "Amount of used swap space in kilobytes (kbswpused)",
                    shadow: true,
                    data: getGenericData(id, filepath, "no", null)
                }, {
                    name: "Amount of cached swap memory in kilobytes (kbswpcad)",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }]);
                showNotes("B", "kbswpcad - This is memory that once was swapped out, is swapped back in but still also is in the swap area (if memory is needed it doesn't need to be swapped out again because it is already in the swap area. This saves I/O).");
                printMultiChart("containerC", "Percentage of used swap space", "%swpused | %swpcad ", null, [{
                    name: "Percentage of used swap space (%swpused)",
                    shadow: true,
                    data: getGenericData(id, filepath, "no", null)
                }, {
                    name: "Percentage of cached swap memory of used swap space (%swpcad)",
                    shadow: true,
                    data: getGenericData(id, set, "no", null)
                }]);
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "AIX":
            break;
        case "SUNOS":
            printChart("containerA", 0, null, "Disk Blocks Available (freeswap)", null, "#166c7d", getGenericData("freemem-freeswap", 2, "no", null));
            hideBlock("B");
            hideBlock("C");
            hideBlock("D");
    }
}), $("#btnMemFree").click(function () {
    switch (displayTitle("Memory Free"), getOS()) {
        case "LINUX":
            var componentsStr = grepHeaders("kbmemfree");
            if (-1 != componentsStr) {
                var exampleFolder = componentsStr.split(",");
                /** @type {!Array} */
                var outChance = [...exampleFolder];
                var legendset = exampleFolder.indexOf("kbmemfree") + 1;
                var rangeTypes = exampleFolder.indexOf("kbbuffers") + 1;
                var s = exampleFolder.indexOf("kbcached") + 1;
                /** @type {string} */
                var filename = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(exampleFolder + " -- " + filename + " -- " + legendset + " -- " + rangeTypes + " -- " + s);
                }
                printChart("containerA", null, null, "Total Memory Free (kbmemfree+kbbuffers+kbcached)", 100, crimsonRed, getMemoryFreeData(filename, legendset, "no", null));
                printChart("containerB", 0, null, "Amount of free memory available in kilobytes (kbmemfree)", 102400, darkPink, getGenericData(filename, legendset, "no", null));
                printChart("containerC", 0, null, "Amount of memory used as buffers by the kernel in kilobytes (kbbuffers)", 102400, bluishTeal, getGenericData(filename, rangeTypes, "no", null));
                printChart("containerD", null, null, "Amount of memory used to cache data by the kernel in kilobytes (kbcached)", null, bluishPurple, getGenericData(filename, s, "no", null));
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), $("#btnMemUsg").click(function () {
    switch (displayTitle("Memory Usage"), getOS()) {
        case "LINUX":
            if (-1 != (msg = grepHeaders("kbmemfree"))) {
                var sqlTable = msg.split(",");
                /** @type {!Array} */
                var outChance = [...sqlTable];
                var legendset = sqlTable.indexOf("%memused") + 1;
                var rangeTypes = sqlTable.indexOf("kbmemused") + 1;
                var secondSet = sqlTable.indexOf("kbcommit") + 1;
                var s = sqlTable.indexOf("%commit") + 1;
                /** @type {string} */
                var fn = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(sqlTable + " -- " + fn + " -- " + legendset + " -- " + rangeTypes + " -- " + secondSet + " -- " + s);
                }
                printChart("containerA", null, null, "Percentage of used memory (%memused)", 100, "#55BF3B", getGenericData(fn, legendset, "no", null));
                printChart("containerB", null, null, "Amount of used memory in kilobytes (kbmemused)", null, "#527bad", getGenericData(fn, rangeTypes, "no", null));
                showNotes("B", "kbmemused - This does not take into account memory used by the kernel");
                printChart("containerC", null, null, "Amount of memory in kilobytes needed for current workload (kbcommit)", null, "#8d4654", getGenericData(fn, secondSet, "no", null));
                showNotes("C", "kbcommit - This is an estimate of how much RAM/swap is needed to guarantee that there never is out of memory.");
                printChart("containerD", null, null, "Percentage of memory needed for current workload [RAM+swap] (%commit)", null, "#f45b5b", getGenericData(fn, s, "no", null));
                showNotes("D", "%commit - This number may be greater than 100% because the kernel usually overcommits memory.");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
            break;
        case "AIX":
        case "SUNOS":
            var msg;
            if (-1 != (msg = grepHeaders("msg/s"))) {
                sqlTable = msg.split(",");
                /** @type {!Array} */
                outChance = [...sqlTable];
                var legendset = sqlTable.indexOf("msg/s") + 1;
                var c = sqlTable.indexOf("sema/s") + 1;
                /** @type {string} */
                fn = outChance.splice(0, 2).join("-");
                if (1 == DEBUG) {
                    console.log(sqlTable + " -- " + fn + " -- msg/s:" + legendset + " -- sema/s:" + c);
                }
                printChart("containerA", 0, null, "Number of IPC message primitives (msg/s)", null, crimsonRed, getGenericData(fn, legendset, "no", null));
                showNotes("A", "Reports message (sending and receiving) activities per second");
                printChart("containerB", null, null, "Number of IPC semaphore primitives (sema/s)", null, bluishPurple, getGenericData(fn, c, "no", null));
                showNotes("B", "Reports semaphore (creating, using, or destroying) activities per second");
                hideBlock("C");
                hideBlock("D");
            } else {
                showBlock("M");
                showNotes("M", "No data found");
            }
    }
}), function (dropTarget) {
    /**
     * @param {!Event} e
     * @param {!Function} value
     * @return {undefined}
     */
    function removeClass(e, value) {
        var result;
        if (value && "function" == typeof value) {
            if (e.dataTransfer) {
                result = e.dataTransfer.files;
            } else {
                if (e.target) {
                    result = e.target.files;
                }
            }
            value.call(null, result);
        }
    }
    /**
     * @param {!Object} element
     * @param {!Function} callback
     * @return {undefined}
     */
    dropTarget.makeDroppable = function (element, callback) {
        /** @type {!Element} */
        var fileInput = document.createElement("input");
        fileInput.setAttribute("type", "file");
        fileInput.setAttribute("multiple", true);
        /** @type {string} */
        fileInput.style.display = "none";
        fileInput.addEventListener("change", function (e) {
            removeClass(e, callback);
        });
        element.appendChild(fileInput);
        element.addEventListener("dragover", function (event) {
            event.preventDefault();
            event.stopPropagation();
            element.classList.add("dragover");
        });
        element.addEventListener("dragleave", function (event) {
            event.preventDefault();
            event.stopPropagation();
            element.classList.remove("dragover");
        });
        element.addEventListener("drop", function (e) {
            e.preventDefault();
            e.stopPropagation();
            element.classList.remove("dragover");
            removeClass(e, callback);
        });
        element.addEventListener("click", function () {
            /** @type {null} */
            fileInput.value = null;
            fileInput.click();
        });
    };
}(this), $(function () {
    defaultPage();
    showModal();
    $("#sidebarCollapse").hide("fast");
    $("#sidebarCollapse").on("click", function () {
        $("#sidebar").toggleClass("active");
    });
    $(document).on("change", ".btn-file :file", function () {
        var input = $(this);
        var numFiles = input.get(0).files ? input.get(0).files.length : 1;
        var label = input.val().replace(/\\/g, "/").replace(/[\w\W]*\//, "");
        input.trigger("fileselect", [numFiles, label]);
    });
    $(".btn-file :file").on("fileselect", function (canCreateDiscussions, h, a) {
        var e = h > 1 ? h + " files selected" : a;
        if (e) {
            if (file) {
                getAsText(file);
            }
            show("#spinner");
            if (1 === DEBUG) {
                console.log("Start spinner from btn select");
            }
            $("#spinner").removeClass("d-none").addClass("d-block");
            updateProgress(10);
        } else {
            if (e) {
                alert(e);
            }
        }
    });
    document.querySelectorAll('a[href^="#_"]').forEach((e) => {
        e.addEventListener("click", function (event) {
            event.preventDefault();
            document.querySelector(this.getAttribute("href")).scrollIntoView({
                behavior: "smooth"
            });
        });
    });
    makeDroppable(window.document.querySelector(".sar-file-uploader"), function (added) {
        /** @type {(Element|null)} */
        var log = document.querySelector(".fileinput-filename");
        /** @type {string} */
        log.innerHTML = "";
        /** @type {number} */
        var i = 0;
        for (; i < added.length; i++) {
            log.innerHTML += "" + added[i].name;
            file = added[i];
            show("#spinner");
            $("#spinner").removeClass("d-none").addClass("d-block");
            if (1 === DEBUG) {
                console.log("Start spinner from drag");
            }
            if (1 === DEBUG) {
                console.log(file.name);
            }
            getAsText(file);
        }
    });
    $("#toggle-button").click(function () {
        /** @type {string} */
        var neededWidth = 220 == $("#nav-container").width() ? "40px" : "220px";
        if ("40px" == neededWidth) {
            $(".menu").hide();
            $("#nav-container").css({
                width: neededWidth
            });
        } else {
            $("#nav-container").css({
                width: neededWidth
            });
            $(".menu").show();
        }
    });
});
